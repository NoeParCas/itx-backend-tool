{"file":"/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Infrastructure/Query/PostgresProductFinder.test.ts","mappings":";;;;;;;;;;;;;;AACA,iFAA2D;AAC3D,2HAAkG;AAClG,yGAAgF;AAChF,6GAAoF;AACpF,8HAAqG;AACrG,0CAKuB;AAEvB,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACtC,MAAM,YAAY,GAAG,IAAA,0BAAmB,GAAE,CAAA;IAC1C,MAAM,YAAY,GAAG;QACpB;YACC,EAAE,EAAE,kBAAU;YACd,IAAI,EAAE,oBAAY;YAClB,YAAY,EAAE,0BAAkB;YAChC,YAAY,EAAE;gBACb,EAAE,IAAI,EAAE,cAAM,EAAE,KAAK,EAAE,yBAAiB,EAAE;gBAC1C,EAAE,IAAI,EAAE,cAAM,EAAE,KAAK,EAAE,2BAAmB,EAAE;gBAC5C,EAAE,IAAI,EAAE,cAAM,EAAE,KAAK,EAAE,2BAAmB,EAAE;aAC5C;SACD;QACD;YACC,EAAE,EAAE,4BAAoB;YACxB,IAAI,EAAE,8BAAsB;YAC5B,YAAY,EAAE,oCAA4B;YAC1C,YAAY,EAAE;gBACb,EAAE,IAAI,EAAE,cAAM,EAAE,KAAK,EAAE,2BAAmB,EAAE;gBAC5C,EAAE,IAAI,EAAE,cAAM,EAAE,KAAK,EAAE,2BAAmB,EAAE;gBAC5C,EAAE,IAAI,EAAE,cAAM,EAAE,KAAK,EAAE,2BAAmB,EAAE;aAC5C;SACD;KACD,CAAA;IACD,MAAM,sBAAsB,GAAG;QAC9B,IAAI,qBAAW,CACd,kBAAU,EACV,oBAAY,EACZ,0BAAkB,EAClB;YACC,IAAI,uBAAa,CAAC,cAAM,EAAE,yBAAiB,CAAC;YAC5C,IAAI,uBAAa,CAAC,cAAM,EAAE,2BAAmB,CAAC;YAC9C,IAAI,uBAAa,CAAC,cAAM,EAAE,2BAAmB,CAAC;SAC9C,CACD;QACD,IAAI,qBAAW,CACd,4BAAoB,EACpB,8BAAsB,EACtB,oCAA4B,EAC5B;YACC,IAAI,uBAAa,CAAC,cAAM,EAAE,2BAAmB,CAAC;YAC9C,IAAI,uBAAa,CAAC,cAAM,EAAE,2BAAmB,CAAC;YAC9C,IAAI,uBAAa,CAAC,cAAM,EAAE,2BAAmB,CAAC;SAC9C,CACD;KACD,CAAA;IAED,EAAE,CAAC,+CAA+C,EAAE,GAAS,EAAE;QAC9D,MAAM,QAAQ,GAAI,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,YAAY,CAAqB,CAAA;QAC7E,MAAM,aAAa,GAAG,IAAI,+BAAqB,CAAC,QAAQ,CAAC,CAAA;QAEzD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAA;QAEzE,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,OAAO,EAAE,CAAA;QAE5C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAA;IAC/C,CAAC,CAAA,CAAC,CAAA;IAEF,EAAE,CAAC,gDAAgD,EAAE,GAAS,EAAE;QAC/D,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,YAAY,CAAoB,CAAA;QAC3E,MAAM,aAAa,GAAG,IAAI,+BAAqB,CAAC,QAAQ,CAAC,CAAA;QAEzD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;QAE/D,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,kCAAwB,CAAC,CAAA;IAChF,CAAC,CAAA,CAAC,CAAA;AACH,CAAC,CAAC,CAAA","names":[],"sources":["/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Infrastructure/Query/PostgresProductFinder.test.ts"],"sourcesContent":["import { Knex } from 'knex'\nimport getQueryBuilderMock from '../Mocks/QueryBuilderMock'\nimport PostgresProductFinder from '../../../../src/Itx/Infrastructure/Query/PostgresProductFinder'\nimport ProductView from '../../../../src/Itx/Application/Query/View/ProductView'\nimport SizeStockView from '../../../../src/Itx/Application/Query/View/SizeStockView'\nimport ProductNotFoundException from '../../../../src/Itx/Domain/Exceptions/ProductNotFoundException'\nimport { PRODUCT_ID, PRODUCT_NAME, PRODUCT_UNIT_SALES, RANDOM_SIZE_STOCK, SIZE_M, SIZE_S, \n\tRANDOM_SIZE_STOCK_2,\n\tSIZE_L,\n\tRANDOM_SIZE_STOCK_3,RANDOM_SIZE_STOCK_4,\n\tANY_OTHER_PRODUCT_ID, ANY_OTHER_PRODUCT_NAME, ANY_OTHER_PRODUCT_UNIT_SALES\n} from '../Mocks/mocks'\n\ndescribe('PostgresProductFinder', () => {\n\tconst queryBuilder = getQueryBuilderMock() \n\tconst QUERY_RESULT = [\n\t\t{\n\t\t\tid: PRODUCT_ID,\n\t\t\tname: PRODUCT_NAME,\n\t\t\tlatest_sales: PRODUCT_UNIT_SALES,\n\t\t\tlatest_stock: [\n\t\t\t\t{ size: SIZE_S, stock: RANDOM_SIZE_STOCK },\n\t\t\t\t{ size: SIZE_M, stock: RANDOM_SIZE_STOCK_2 },\n\t\t\t\t{ size: SIZE_L, stock: RANDOM_SIZE_STOCK_3 }\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: ANY_OTHER_PRODUCT_ID,\n\t\t\tname: ANY_OTHER_PRODUCT_NAME,\n\t\t\tlatest_sales: ANY_OTHER_PRODUCT_UNIT_SALES,\n\t\t\tlatest_stock: [\n\t\t\t\t{ size: SIZE_S, stock: RANDOM_SIZE_STOCK_4 },\n\t\t\t\t{ size: SIZE_M, stock: RANDOM_SIZE_STOCK_2 },\n\t\t\t\t{ size: SIZE_L, stock: RANDOM_SIZE_STOCK_4 }\n\t\t\t]\n\t\t}\n\t]\n\tconst EXPECTED_FINDER_RESULT = [\n\t\tnew ProductView(\n\t\t\tPRODUCT_ID,\n\t\t\tPRODUCT_NAME,\n\t\t\tPRODUCT_UNIT_SALES,\n\t\t\t[\n\t\t\t\tnew SizeStockView(SIZE_S, RANDOM_SIZE_STOCK),\n\t\t\t\tnew SizeStockView(SIZE_M, RANDOM_SIZE_STOCK_2),\n\t\t\t\tnew SizeStockView(SIZE_L, RANDOM_SIZE_STOCK_3)\n\t\t\t]\n\t\t),\n\t\tnew ProductView(\n\t\t\tANY_OTHER_PRODUCT_ID,\n\t\t\tANY_OTHER_PRODUCT_NAME,\n\t\t\tANY_OTHER_PRODUCT_UNIT_SALES,\n\t\t\t[\n\t\t\t\tnew SizeStockView(SIZE_S, RANDOM_SIZE_STOCK_4),\n\t\t\t\tnew SizeStockView(SIZE_M, RANDOM_SIZE_STOCK_2),\n\t\t\t\tnew SizeStockView(SIZE_L, RANDOM_SIZE_STOCK_4)\n\t\t\t]\n\t\t)\n\t]\n\n\tit('should return all updated product information', async () => {\n\t\tconst knexMock = (jest.fn().mockReturnValue(queryBuilder) as unknown) as Knex\n\t\tconst productFinder = new PostgresProductFinder(knexMock)\n\n\t\tjest.spyOn(productFinder, 'findAllQuery').mockResolvedValue(QUERY_RESULT) \n\t\t\n\t\tconst result = await productFinder.findAll()\n\n\t\texpect(result).toEqual(EXPECTED_FINDER_RESULT)\n\t})\n\n\tit('should throw an error if no products are found', async () => {\n\t\tconst knexMock = jest.fn().mockReturnValue(queryBuilder) as unknown as Knex\n\t\tconst productFinder = new PostgresProductFinder(knexMock)\n\n\t\tjest.spyOn(productFinder, 'findAllQuery').mockResolvedValue([]) \n\n\t\tawait expect(productFinder.findAll()).rejects.toThrow(ProductNotFoundException)\n\t})\n})\n"],"version":3}