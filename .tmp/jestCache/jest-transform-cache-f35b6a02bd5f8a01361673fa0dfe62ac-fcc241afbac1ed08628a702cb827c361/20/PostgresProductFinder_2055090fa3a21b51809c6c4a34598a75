afbf570d2741fa1c0af8a39b300bba53
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const SizeStockView_1 = __importDefault(require("../../Application/Query/View/SizeStockView"));
const ProductView_1 = __importDefault(require("../../Application/Query/View/ProductView"));
const ProductNotFoundException_1 = __importDefault(require("../../Domain/Exceptions/ProductNotFoundException"));
const SCHEMA = 'itx';
const PRODUCT_TABLE = 'product';
const SIZE_STOCK_TABLE = 'stock';
const SALES_UNITS_TABLE = 'sales_units';
class PostgresProductFinder {
    constructor(postgresClient) {
        this.postgresClient = postgresClient;
    }
    findAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const query = yield this.findAllQuery();
            if (query.length === 0) {
                throw new ProductNotFoundException_1.default();
            }
            const products = query.map((product) => {
                const sizeStock = product.latest_stock.map((stock) => {
                    return new SizeStockView_1.default(stock.size, stock.stock);
                });
                return new ProductView_1.default(product.id, product.name, product.latest_sales, sizeStock);
            });
            return products;
        });
    }
    findAllQuery() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.postgresClient(PRODUCT_TABLE)
                .select(`${PRODUCT_TABLE}.id`, `${PRODUCT_TABLE}.name`, 'latest_sales.units as latest_sales', this.postgresClient.raw(`jsonb_agg(
				jsonb_build_object(
					'size', latest_stock.size,
					'stock', latest_stock.stock
				)
			) as latest_stock`))
                .withSchema(SCHEMA)
                .leftJoin(this.postgresClient.raw(`(
				SELECT product_id, units
				FROM ${SCHEMA}.${SALES_UNITS_TABLE}
				WHERE (product_id, updated_at) IN (
					SELECT product_id, MAX(updated_at)
					FROM ${SCHEMA}.${SALES_UNITS_TABLE}
					GROUP BY product_id
				)
			) as latest_sales`), `${PRODUCT_TABLE}.id`, 'latest_sales.product_id')
                .leftJoin(this.postgresClient.raw(`(
				SELECT product_id, size, stock
				FROM ${SCHEMA}.${SIZE_STOCK_TABLE}
				WHERE (product_id, size, updated_at) IN (
					SELECT product_id, size, MAX(updated_at)
					FROM ${SCHEMA}.${SIZE_STOCK_TABLE}
					GROUP BY product_id, size
				)
			) as latest_stock`), `${PRODUCT_TABLE}.id`, 'latest_stock.product_id')
                .groupBy(`${PRODUCT_TABLE}.id`, 'latest_sales.units');
        });
    }
}
exports.default = PostgresProductFinder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL25vZWxpYXBhcmFkYWNhc3Ryby9pdHgtYmFja2VuZC10b29sL3NyYy9JdHgvSW5mcmFzdHJ1Y3R1cmUvUXVlcnkvUG9zdGdyZXNQcm9kdWN0RmluZGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBRUEsK0ZBQXNFO0FBQ3RFLDJGQUFrRTtBQUNsRSxnSEFBdUY7QUFFdkYsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFBO0FBQ3BCLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQTtBQUMvQixNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQTtBQUNoQyxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQTtBQVl2QyxNQUFxQixxQkFBcUI7SUFDekMsWUFDa0IsY0FBb0I7UUFBcEIsbUJBQWMsR0FBZCxjQUFjLENBQU07SUFDbkMsQ0FBQztJQUVFLE9BQU87O1lBQ1osTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUE7WUFFdkMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDdkIsTUFBTSxJQUFJLGtDQUF3QixFQUFFLENBQUE7YUFDcEM7WUFFRCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBd0IsRUFBRyxFQUFFO2dCQUN4RCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQXNCLEVBQUUsRUFBRTtvQkFDckUsT0FBTyxJQUFJLHVCQUFhLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7Z0JBQ2xELENBQUMsQ0FBQyxDQUFBO2dCQUVGLE9BQU8sSUFBSSxxQkFBVyxDQUNyQixPQUFPLENBQUMsRUFBRSxFQUNWLE9BQU8sQ0FBQyxJQUFJLEVBQ1osT0FBTyxDQUFDLFlBQVksRUFDcEIsU0FBUyxDQUNULENBQUE7WUFDRixDQUFDLENBQUMsQ0FBQTtZQUVGLE9BQU8sUUFBUSxDQUFBO1FBQ2hCLENBQUM7S0FBQTtJQUVJLFlBQVk7O1lBQ2pCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7aUJBQ3ZDLE1BQU0sQ0FDTixHQUFHLGFBQWEsS0FBSyxFQUNyQixHQUFHLGFBQWEsT0FBTyxFQUN2QixvQ0FBb0MsRUFDcEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7Ozs7O3FCQUtOLENBQUMsQ0FDbkI7aUJBQ0EsVUFBVSxDQUFDLE1BQU0sQ0FBQztpQkFDbEIsUUFBUSxDQUNSLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDOztXQUVoQixNQUFNLElBQUksaUJBQWlCOzs7WUFHMUIsTUFBTSxJQUFJLGlCQUFpQjs7O3FCQUdsQixDQUFDLEVBQ25CLEdBQUcsYUFBYSxLQUFLLEVBQ3JCLHlCQUF5QixDQUN6QjtpQkFDQSxRQUFRLENBQ1IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7O1dBRWhCLE1BQU0sSUFBSSxnQkFBZ0I7OztZQUd6QixNQUFNLElBQUksZ0JBQWdCOzs7cUJBR2pCLENBQUMsRUFDbkIsR0FBRyxhQUFhLEtBQUssRUFDckIseUJBQXlCLENBQ3pCO2lCQUNBLE9BQU8sQ0FBQyxHQUFHLGFBQWEsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUE7UUFDdEQsQ0FBQztLQUFBO0NBQ0Q7QUF0RUQsd0NBc0VDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9ub2VsaWFwYXJhZGFjYXN0cm8vaXR4LWJhY2tlbmQtdG9vbC9zcmMvSXR4L0luZnJhc3RydWN0dXJlL1F1ZXJ5L1Bvc3RncmVzUHJvZHVjdEZpbmRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLbmV4IH0gZnJvbSAna25leCdcbmltcG9ydCB7IFByb2R1Y3RGaW5kZXIgfSBmcm9tICcuLi8uLi9BcHBsaWNhdGlvbi9RdWVyeS9GaW5kZXIvUHJvZHVjdEZpbmRlcidcbmltcG9ydCBTaXplU3RvY2tWaWV3IGZyb20gJy4uLy4uL0FwcGxpY2F0aW9uL1F1ZXJ5L1ZpZXcvU2l6ZVN0b2NrVmlldydcbmltcG9ydCBQcm9kdWN0VmlldyBmcm9tICcuLi8uLi9BcHBsaWNhdGlvbi9RdWVyeS9WaWV3L1Byb2R1Y3RWaWV3J1xuaW1wb3J0IFByb2R1Y3ROb3RGb3VuZEV4Y2VwdGlvbiBmcm9tICcuLi8uLi9Eb21haW4vRXhjZXB0aW9ucy9Qcm9kdWN0Tm90Rm91bmRFeGNlcHRpb24nXG5cbmNvbnN0IFNDSEVNQSA9ICdpdHgnXG5jb25zdCBQUk9EVUNUX1RBQkxFID0gJ3Byb2R1Y3QnXG5jb25zdCBTSVpFX1NUT0NLX1RBQkxFID0gJ3N0b2NrJ1xuY29uc3QgU0FMRVNfVU5JVFNfVEFCTEUgPSAnc2FsZXNfdW5pdHMnXG5cbnR5cGUgTGF0ZXN0U3RvY2tUeXBlID0ge1xuXHRcdHNpemU6IHN0cmluZ1xuXHRcdHN0b2NrOiBudW1iZXJcblx0fVxuZXhwb3J0IHR5cGUgUHJvZHVjdFF1ZXJ5VHlwZSA9IHtcblx0aWQ6IG51bWJlclxuXHRuYW1lOiBzdHJpbmdcblx0bGF0ZXN0X3NhbGVzOiBudW1iZXJcblx0bGF0ZXN0X3N0b2NrOiBMYXRlc3RTdG9ja1R5cGVbXVxufVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdGdyZXNQcm9kdWN0RmluZGVyIGltcGxlbWVudHMgUHJvZHVjdEZpbmRlciB7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgcG9zdGdyZXNDbGllbnQ6IEtuZXhcblx0KSB7fVxuXG5cdGFzeW5jIGZpbmRBbGwoKTogUHJvbWlzZTxQcm9kdWN0Vmlld1tdPiB7XG5cdFx0Y29uc3QgcXVlcnkgPSBhd2FpdCB0aGlzLmZpbmRBbGxRdWVyeSgpXG5cblx0XHRpZiAocXVlcnkubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgUHJvZHVjdE5vdEZvdW5kRXhjZXB0aW9uKClcblx0XHR9XG5cblx0XHRjb25zdCBwcm9kdWN0cyA9IHF1ZXJ5Lm1hcCgocHJvZHVjdDpQcm9kdWN0UXVlcnlUeXBlICkgPT4ge1xuXHRcdFx0Y29uc3Qgc2l6ZVN0b2NrID0gcHJvZHVjdC5sYXRlc3Rfc3RvY2subWFwKChzdG9jazogTGF0ZXN0U3RvY2tUeXBlKSA9PiB7XG5cdFx0XHRcdHJldHVybiBuZXcgU2l6ZVN0b2NrVmlldyhzdG9jay5zaXplLCBzdG9jay5zdG9jaylcblx0XHRcdH0pXG5cblx0XHRcdHJldHVybiBuZXcgUHJvZHVjdFZpZXcoXG5cdFx0XHRcdHByb2R1Y3QuaWQsXG5cdFx0XHRcdHByb2R1Y3QubmFtZSxcblx0XHRcdFx0cHJvZHVjdC5sYXRlc3Rfc2FsZXMsXG5cdFx0XHRcdHNpemVTdG9ja1xuXHRcdFx0KVxuXHRcdH0pXG5cblx0XHRyZXR1cm4gcHJvZHVjdHNcblx0fVxuXG5hc3luYyBmaW5kQWxsUXVlcnkoKTogUHJvbWlzZTxQcm9kdWN0UXVlcnlUeXBlW10+IHtcblx0cmV0dXJuIHRoaXMucG9zdGdyZXNDbGllbnQoUFJPRFVDVF9UQUJMRSlcblx0XHQuc2VsZWN0KFxuXHRcdFx0YCR7UFJPRFVDVF9UQUJMRX0uaWRgLCBcblx0XHRcdGAke1BST0RVQ1RfVEFCTEV9Lm5hbWVgLFxuXHRcdFx0J2xhdGVzdF9zYWxlcy51bml0cyBhcyBsYXRlc3Rfc2FsZXMnLFxuXHRcdFx0dGhpcy5wb3N0Z3Jlc0NsaWVudC5yYXcoYGpzb25iX2FnZyhcblx0XHRcdFx0anNvbmJfYnVpbGRfb2JqZWN0KFxuXHRcdFx0XHRcdCdzaXplJywgbGF0ZXN0X3N0b2NrLnNpemUsXG5cdFx0XHRcdFx0J3N0b2NrJywgbGF0ZXN0X3N0b2NrLnN0b2NrXG5cdFx0XHRcdClcblx0XHRcdCkgYXMgbGF0ZXN0X3N0b2NrYCksXG5cdFx0KVxuXHRcdC53aXRoU2NoZW1hKFNDSEVNQSlcblx0XHQubGVmdEpvaW4oXG5cdFx0XHR0aGlzLnBvc3RncmVzQ2xpZW50LnJhdyhgKFxuXHRcdFx0XHRTRUxFQ1QgcHJvZHVjdF9pZCwgdW5pdHNcblx0XHRcdFx0RlJPTSAke1NDSEVNQX0uJHtTQUxFU19VTklUU19UQUJMRX1cblx0XHRcdFx0V0hFUkUgKHByb2R1Y3RfaWQsIHVwZGF0ZWRfYXQpIElOIChcblx0XHRcdFx0XHRTRUxFQ1QgcHJvZHVjdF9pZCwgTUFYKHVwZGF0ZWRfYXQpXG5cdFx0XHRcdFx0RlJPTSAke1NDSEVNQX0uJHtTQUxFU19VTklUU19UQUJMRX1cblx0XHRcdFx0XHRHUk9VUCBCWSBwcm9kdWN0X2lkXG5cdFx0XHRcdClcblx0XHRcdCkgYXMgbGF0ZXN0X3NhbGVzYCksXG5cdFx0XHRgJHtQUk9EVUNUX1RBQkxFfS5pZGAsXG5cdFx0XHQnbGF0ZXN0X3NhbGVzLnByb2R1Y3RfaWQnXG5cdFx0KVxuXHRcdC5sZWZ0Sm9pbihcblx0XHRcdHRoaXMucG9zdGdyZXNDbGllbnQucmF3KGAoXG5cdFx0XHRcdFNFTEVDVCBwcm9kdWN0X2lkLCBzaXplLCBzdG9ja1xuXHRcdFx0XHRGUk9NICR7U0NIRU1BfS4ke1NJWkVfU1RPQ0tfVEFCTEV9XG5cdFx0XHRcdFdIRVJFIChwcm9kdWN0X2lkLCBzaXplLCB1cGRhdGVkX2F0KSBJTiAoXG5cdFx0XHRcdFx0U0VMRUNUIHByb2R1Y3RfaWQsIHNpemUsIE1BWCh1cGRhdGVkX2F0KVxuXHRcdFx0XHRcdEZST00gJHtTQ0hFTUF9LiR7U0laRV9TVE9DS19UQUJMRX1cblx0XHRcdFx0XHRHUk9VUCBCWSBwcm9kdWN0X2lkLCBzaXplXG5cdFx0XHRcdClcblx0XHRcdCkgYXMgbGF0ZXN0X3N0b2NrYCksXG5cdFx0XHRgJHtQUk9EVUNUX1RBQkxFfS5pZGAsXG5cdFx0XHQnbGF0ZXN0X3N0b2NrLnByb2R1Y3RfaWQnXG5cdFx0KVxuXHRcdC5ncm91cEJ5KGAke1BST0RVQ1RfVEFCTEV9LmlkYCwgJ2xhdGVzdF9zYWxlcy51bml0cycpXG5cdH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==