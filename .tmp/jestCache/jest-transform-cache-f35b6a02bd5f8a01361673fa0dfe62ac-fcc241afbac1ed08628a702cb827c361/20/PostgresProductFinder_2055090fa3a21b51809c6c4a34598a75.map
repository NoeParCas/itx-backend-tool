{"file":"/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Infrastructure/Query/PostgresProductFinder.ts","mappings":";;;;;;;;;;;;;;AAEA,+FAAsE;AACtE,2FAAkE;AAClE,gHAAuF;AAEvF,MAAM,MAAM,GAAG,KAAK,CAAA;AACpB,MAAM,aAAa,GAAG,SAAS,CAAA;AAC/B,MAAM,gBAAgB,GAAG,OAAO,CAAA;AAChC,MAAM,iBAAiB,GAAG,aAAa,CAAA;AAYvC,MAAqB,qBAAqB;IACzC,YACkB,cAAoB;QAApB,mBAAc,GAAd,cAAc,CAAM;IACnC,CAAC;IAEE,OAAO;;YACZ,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAA;YAEvC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACvB,MAAM,IAAI,kCAAwB,EAAE,CAAA;aACpC;YAED,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,OAAwB,EAAG,EAAE;gBACxD,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,KAAsB,EAAE,EAAE;oBACrE,OAAO,IAAI,uBAAa,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,CAAA;gBAClD,CAAC,CAAC,CAAA;gBAEF,OAAO,IAAI,qBAAW,CACrB,OAAO,CAAC,EAAE,EACV,OAAO,CAAC,IAAI,EACZ,OAAO,CAAC,YAAY,EACpB,SAAS,CACT,CAAA;YACF,CAAC,CAAC,CAAA;YAEF,OAAO,QAAQ,CAAA;QAChB,CAAC;KAAA;IAEI,YAAY;;YACjB,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC;iBACvC,MAAM,CACN,GAAG,aAAa,KAAK,EACrB,GAAG,aAAa,OAAO,EACvB,oCAAoC,EACpC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;;;;;qBAKN,CAAC,CACnB;iBACA,UAAU,CAAC,MAAM,CAAC;iBAClB,QAAQ,CACR,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;;WAEhB,MAAM,IAAI,iBAAiB;;;YAG1B,MAAM,IAAI,iBAAiB;;;qBAGlB,CAAC,EACnB,GAAG,aAAa,KAAK,EACrB,yBAAyB,CACzB;iBACA,QAAQ,CACR,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;;WAEhB,MAAM,IAAI,gBAAgB;;;YAGzB,MAAM,IAAI,gBAAgB;;;qBAGjB,CAAC,EACnB,GAAG,aAAa,KAAK,EACrB,yBAAyB,CACzB;iBACA,OAAO,CAAC,GAAG,aAAa,KAAK,EAAE,oBAAoB,CAAC,CAAA;QACtD,CAAC;KAAA;CACD;AAtED,wCAsEC","names":[],"sources":["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Infrastructure/Query/PostgresProductFinder.ts"],"sourcesContent":["import { Knex } from 'knex'\nimport { ProductFinder } from '../../Application/Query/Finder/ProductFinder'\nimport SizeStockView from '../../Application/Query/View/SizeStockView'\nimport ProductView from '../../Application/Query/View/ProductView'\nimport ProductNotFoundException from '../../Domain/Exceptions/ProductNotFoundException'\n\nconst SCHEMA = 'itx'\nconst PRODUCT_TABLE = 'product'\nconst SIZE_STOCK_TABLE = 'stock'\nconst SALES_UNITS_TABLE = 'sales_units'\n\ntype LatestStockType = {\n\t\tsize: string\n\t\tstock: number\n\t}\nexport type ProductQueryType = {\n\tid: number\n\tname: string\n\tlatest_sales: number\n\tlatest_stock: LatestStockType[]\n}\nexport default class PostgresProductFinder implements ProductFinder {\n\tconstructor(\n\t\tprivate readonly postgresClient: Knex\n\t) {}\n\n\tasync findAll(): Promise<ProductView[]> {\n\t\tconst query = await this.findAllQuery()\n\n\t\tif (query.length === 0) {\n\t\t\tthrow new ProductNotFoundException()\n\t\t}\n\n\t\tconst products = query.map((product:ProductQueryType ) => {\n\t\t\tconst sizeStock = product.latest_stock.map((stock: LatestStockType) => {\n\t\t\t\treturn new SizeStockView(stock.size, stock.stock)\n\t\t\t})\n\n\t\t\treturn new ProductView(\n\t\t\t\tproduct.id,\n\t\t\t\tproduct.name,\n\t\t\t\tproduct.latest_sales,\n\t\t\t\tsizeStock\n\t\t\t)\n\t\t})\n\n\t\treturn products\n\t}\n\nasync findAllQuery(): Promise<ProductQueryType[]> {\n\treturn this.postgresClient(PRODUCT_TABLE)\n\t\t.select(\n\t\t\t`${PRODUCT_TABLE}.id`, \n\t\t\t`${PRODUCT_TABLE}.name`,\n\t\t\t'latest_sales.units as latest_sales',\n\t\t\tthis.postgresClient.raw(`jsonb_agg(\n\t\t\t\tjsonb_build_object(\n\t\t\t\t\t'size', latest_stock.size,\n\t\t\t\t\t'stock', latest_stock.stock\n\t\t\t\t)\n\t\t\t) as latest_stock`),\n\t\t)\n\t\t.withSchema(SCHEMA)\n\t\t.leftJoin(\n\t\t\tthis.postgresClient.raw(`(\n\t\t\t\tSELECT product_id, units\n\t\t\t\tFROM ${SCHEMA}.${SALES_UNITS_TABLE}\n\t\t\t\tWHERE (product_id, updated_at) IN (\n\t\t\t\t\tSELECT product_id, MAX(updated_at)\n\t\t\t\t\tFROM ${SCHEMA}.${SALES_UNITS_TABLE}\n\t\t\t\t\tGROUP BY product_id\n\t\t\t\t)\n\t\t\t) as latest_sales`),\n\t\t\t`${PRODUCT_TABLE}.id`,\n\t\t\t'latest_sales.product_id'\n\t\t)\n\t\t.leftJoin(\n\t\t\tthis.postgresClient.raw(`(\n\t\t\t\tSELECT product_id, size, stock\n\t\t\t\tFROM ${SCHEMA}.${SIZE_STOCK_TABLE}\n\t\t\t\tWHERE (product_id, size, updated_at) IN (\n\t\t\t\t\tSELECT product_id, size, MAX(updated_at)\n\t\t\t\t\tFROM ${SCHEMA}.${SIZE_STOCK_TABLE}\n\t\t\t\t\tGROUP BY product_id, size\n\t\t\t\t)\n\t\t\t) as latest_stock`),\n\t\t\t`${PRODUCT_TABLE}.id`,\n\t\t\t'latest_stock.product_id'\n\t\t)\n\t\t.groupBy(`${PRODUCT_TABLE}.id`, 'latest_sales.units')\n\t}\n}\n"],"version":3}