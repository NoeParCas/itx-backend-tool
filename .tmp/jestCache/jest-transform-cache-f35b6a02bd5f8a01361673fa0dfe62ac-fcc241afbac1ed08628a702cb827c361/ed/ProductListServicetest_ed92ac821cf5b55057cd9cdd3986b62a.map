{"file":"/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Application/Service/ProductListService.test.ts","mappings":";;;;;AACA,yGAAgF;AAChF,6GAAoF;AACpF,oHAA2F;AAG3F,4DAAqR;AAErR,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IACnC,IAAI,OAA2B,CAAA;IAC/B,IAAI,sBAAuD,CAAA;IAC3D,IAAI,0BAA+D,CAAA;IACnE,IAAI,QAAuB,CAAA;IAC1B,IAAI,OAAwB,CAAA;IAE5B,UAAU,CAAC,GAAG,EAAE;QACd,sBAAsB,GAAG;YACvB,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;SACS,CAAA;QAEpC,0BAA0B,GAAG;YAC3B,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;SACa,CAAA;QACxC,OAAO,GAAG,IAAI,4BAAkB,CAAC;YAC/B,sBAAsB;YACtB,0BAA0B;SAC3B,CAAC,CAAA;QACJ,OAAO,GAAG;YACT,EAAE,EAAE,UAAU;YACd,SAAS,EAAE,GAAG;YACd,UAAU,EAAE,GAAG;SACf,CAAA;QACD,QAAQ,GAAG;YACV,IAAI,qBAAW,CACd,kBAAU,EACV,oBAAY,EACZ,0BAAkB,EAClB;gBACC,IAAI,uBAAa,CAAC,cAAM,EAAE,yBAAiB,CAAC;gBAC5C,IAAI,uBAAa,CAAC,cAAM,EAAE,2BAAmB,CAAC;gBAC9C,IAAI,uBAAa,CAAC,cAAM,EAAE,2BAAmB,CAAC;aAC9C,CACD;YACD,IAAI,qBAAW,CACd,4BAAoB,EACpB,8BAAsB,EACtB,oCAA4B,EAC5B;gBACC,IAAI,uBAAa,CAAC,cAAM,EAAE,2BAAmB,CAAC;gBAC9C,IAAI,uBAAa,CAAC,cAAM,EAAE,2BAAmB,CAAC;gBAC9C,IAAI,uBAAa,CAAC,cAAM,EAAE,2BAAmB,CAAC;aAC9C,CACD;SACD,CAAA;IACF,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sEAAsE,EAAE,GAAG,EAAE;QAC7E,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;QAEvC,MAAM,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC,qBAAqB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;QACpF,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,MAAM,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QACtF,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC,qBAAqB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;QACxF,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,MAAM,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QAC1F,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Application/Service/ProductListService.test.ts"],"sourcesContent":["import { SortWeightQuery } from '../../../../src/Itx/Application/Query/SortWeightQuery'\nimport ProductView from '../../../../src/Itx/Application/Query/View/ProductView'\nimport SizeStockView from '../../../../src/Itx/Application/Query/View/SizeStockView'\nimport ProductListService from '../../../../src/Itx/Application/Service/ProductListService'\nimport SalesScoreStrategy from '../../../../src/Itx/Application/Service/SalesScoreStrategy'\nimport SizeStockScoreStrategy from '../../../../src/Itx/Application/Service/SizeStockScoreStrategy'\nimport { ANY_OTHER_PRODUCT_ID, ANY_OTHER_PRODUCT_NAME, ANY_OTHER_PRODUCT_UNIT_SALES, PRODUCT_ID, PRODUCT_NAME, PRODUCT_UNIT_SALES, RANDOM_SIZE_STOCK, RANDOM_SIZE_STOCK_2, RANDOM_SIZE_STOCK_3, RANDOM_SIZE_STOCK_4, SIZE_L, SIZE_M, SIZE_S } from '../../Infrastructure/Mocks/mocks'\n\ndescribe('ProductListService', () => {\n\tlet service: ProductListService\n\tlet mockSalesScoreStrategy: jest.Mocked<SalesScoreStrategy>\n\tlet mockSizeStockScoreStrategy: jest.Mocked<SizeStockScoreStrategy>\n\tlet products: ProductView[]\n  let weights: SortWeightQuery\n\n  beforeEach(() => {\n    mockSalesScoreStrategy = {\n      calculateScore: jest.fn(),\n    } as jest.Mocked<SalesScoreStrategy>\n\n    mockSizeStockScoreStrategy = {\n      calculateScore: jest.fn(),\n    } as jest.Mocked<SizeStockScoreStrategy>\n    service = new ProductListService([\n      mockSalesScoreStrategy,\n      mockSizeStockScoreStrategy,\n    ])\n\t\tweights = {\n\t\t\tid: 'ramdomId',\n\t\t\tsalesUnit: 0.7,\n\t\t\tstockRatio: 0.3\n\t\t}\n\t\tproducts = [\n\t\t\tnew ProductView(\n\t\t\t\tPRODUCT_ID,\n\t\t\t\tPRODUCT_NAME,\n\t\t\t\tPRODUCT_UNIT_SALES,\n\t\t\t\t[\n\t\t\t\t\tnew SizeStockView(SIZE_S, RANDOM_SIZE_STOCK),\n\t\t\t\t\tnew SizeStockView(SIZE_M, RANDOM_SIZE_STOCK_2),\n\t\t\t\t\tnew SizeStockView(SIZE_L, RANDOM_SIZE_STOCK_3)\n\t\t\t\t]\n\t\t\t),\n\t\t\tnew ProductView(\n\t\t\t\tANY_OTHER_PRODUCT_ID,\n\t\t\t\tANY_OTHER_PRODUCT_NAME,\n\t\t\t\tANY_OTHER_PRODUCT_UNIT_SALES,\n\t\t\t\t[\n\t\t\t\t\tnew SizeStockView(SIZE_S, RANDOM_SIZE_STOCK_4),\n\t\t\t\t\tnew SizeStockView(SIZE_M, RANDOM_SIZE_STOCK_2),\n\t\t\t\t\tnew SizeStockView(SIZE_L, RANDOM_SIZE_STOCK_4)\n\t\t\t\t]\n\t\t\t)\n\t\t]\n\t})\n\n\tit('should call calculateScore on each scoring strategy for each product', () => {\n    service.listProducts(products, weights)\n\n    expect(mockSalesScoreStrategy.calculateScore).toHaveBeenCalledTimes(products.length)\n    products.forEach((product) => {\n      expect(mockSalesScoreStrategy.calculateScore).toHaveBeenCalledWith(product, weights)\n    })\n\n    expect(mockSizeStockScoreStrategy.calculateScore).toHaveBeenCalledTimes(products.length)\n    products.forEach((product) => {\n      expect(mockSizeStockScoreStrategy.calculateScore).toHaveBeenCalledWith(product, weights)\n    })\n  })\n})\n"],"version":3}