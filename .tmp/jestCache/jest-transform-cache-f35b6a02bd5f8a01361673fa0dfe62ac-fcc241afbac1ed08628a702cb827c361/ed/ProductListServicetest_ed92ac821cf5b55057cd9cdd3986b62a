dd8f8e523bdd89fc3563f01ebf80131e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ProductView_1 = __importDefault(require("../../../../src/Itx/Application/Query/View/ProductView"));
const SizeStockView_1 = __importDefault(require("../../../../src/Itx/Application/Query/View/SizeStockView"));
const ProductListService_1 = __importDefault(require("../../../../src/Itx/Application/Service/ProductListService"));
const mocks_1 = require("../../Infrastructure/Mocks/mocks");
describe('ProductListService', () => {
    let service;
    let mockSalesScoreStrategy;
    let mockSizeStockScoreStrategy;
    let products;
    let weights;
    beforeEach(() => {
        mockSalesScoreStrategy = {
            calculateScore: jest.fn(),
        };
        mockSizeStockScoreStrategy = {
            calculateScore: jest.fn(),
        };
        service = new ProductListService_1.default([
            mockSalesScoreStrategy,
            mockSizeStockScoreStrategy,
        ]);
        weights = {
            id: 'ramdomId',
            salesUnit: 0.7,
            stockRatio: 0.3
        };
        products = [
            new ProductView_1.default(mocks_1.PRODUCT_ID, mocks_1.PRODUCT_NAME, mocks_1.PRODUCT_UNIT_SALES, [
                new SizeStockView_1.default(mocks_1.SIZE_S, mocks_1.RANDOM_SIZE_STOCK),
                new SizeStockView_1.default(mocks_1.SIZE_M, mocks_1.RANDOM_SIZE_STOCK_2),
                new SizeStockView_1.default(mocks_1.SIZE_L, mocks_1.RANDOM_SIZE_STOCK_3)
            ]),
            new ProductView_1.default(mocks_1.ANY_OTHER_PRODUCT_ID, mocks_1.ANY_OTHER_PRODUCT_NAME, mocks_1.ANY_OTHER_PRODUCT_UNIT_SALES, [
                new SizeStockView_1.default(mocks_1.SIZE_S, mocks_1.RANDOM_SIZE_STOCK_4),
                new SizeStockView_1.default(mocks_1.SIZE_M, mocks_1.RANDOM_SIZE_STOCK_2),
                new SizeStockView_1.default(mocks_1.SIZE_L, mocks_1.RANDOM_SIZE_STOCK_4)
            ])
        ];
    });
    it('should call calculateScore on each scoring strategy for each product', () => {
        service.listProducts(products, weights);
        expect(mockSalesScoreStrategy.calculateScore).toHaveBeenCalledTimes(products.length);
        products.forEach((product) => {
            expect(mockSalesScoreStrategy.calculateScore).toHaveBeenCalledWith(product, weights);
        });
        expect(mockSizeStockScoreStrategy.calculateScore).toHaveBeenCalledTimes(products.length);
        products.forEach((product) => {
            expect(mockSizeStockScoreStrategy.calculateScore).toHaveBeenCalledWith(product, weights);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL25vZWxpYXBhcmFkYWNhc3Ryby9pdHgtYmFja2VuZC10b29sL3Rlc3RzL2plc3QvQXBwbGljYXRpb24vU2VydmljZS9Qcm9kdWN0TGlzdFNlcnZpY2UudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUNBLHlHQUFnRjtBQUNoRiw2R0FBb0Y7QUFDcEYsb0hBQTJGO0FBRzNGLDREQUFxUjtBQUVyUixRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO0lBQ25DLElBQUksT0FBMkIsQ0FBQTtJQUMvQixJQUFJLHNCQUF1RCxDQUFBO0lBQzNELElBQUksMEJBQStELENBQUE7SUFDbkUsSUFBSSxRQUF1QixDQUFBO0lBQzFCLElBQUksT0FBd0IsQ0FBQTtJQUU1QixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2Qsc0JBQXNCLEdBQUc7WUFDdkIsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDUyxDQUFBO1FBRXBDLDBCQUEwQixHQUFHO1lBQzNCLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1NBQ2EsQ0FBQTtRQUN4QyxPQUFPLEdBQUcsSUFBSSw0QkFBa0IsQ0FBQztZQUMvQixzQkFBc0I7WUFDdEIsMEJBQTBCO1NBQzNCLENBQUMsQ0FBQTtRQUNKLE9BQU8sR0FBRztZQUNULEVBQUUsRUFBRSxVQUFVO1lBQ2QsU0FBUyxFQUFFLEdBQUc7WUFDZCxVQUFVLEVBQUUsR0FBRztTQUNmLENBQUE7UUFDRCxRQUFRLEdBQUc7WUFDVixJQUFJLHFCQUFXLENBQ2Qsa0JBQVUsRUFDVixvQkFBWSxFQUNaLDBCQUFrQixFQUNsQjtnQkFDQyxJQUFJLHVCQUFhLENBQUMsY0FBTSxFQUFFLHlCQUFpQixDQUFDO2dCQUM1QyxJQUFJLHVCQUFhLENBQUMsY0FBTSxFQUFFLDJCQUFtQixDQUFDO2dCQUM5QyxJQUFJLHVCQUFhLENBQUMsY0FBTSxFQUFFLDJCQUFtQixDQUFDO2FBQzlDLENBQ0Q7WUFDRCxJQUFJLHFCQUFXLENBQ2QsNEJBQW9CLEVBQ3BCLDhCQUFzQixFQUN0QixvQ0FBNEIsRUFDNUI7Z0JBQ0MsSUFBSSx1QkFBYSxDQUFDLGNBQU0sRUFBRSwyQkFBbUIsQ0FBQztnQkFDOUMsSUFBSSx1QkFBYSxDQUFDLGNBQU0sRUFBRSwyQkFBbUIsQ0FBQztnQkFDOUMsSUFBSSx1QkFBYSxDQUFDLGNBQU0sRUFBRSwyQkFBbUIsQ0FBQzthQUM5QyxDQUNEO1NBQ0QsQ0FBQTtJQUNGLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHNFQUFzRSxFQUFFLEdBQUcsRUFBRTtRQUM3RSxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUV2QyxNQUFNLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3BGLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUMzQixNQUFNLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3RGLENBQUMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxDQUFDLDBCQUEwQixDQUFDLGNBQWMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN4RixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDM0IsTUFBTSxDQUFDLDBCQUEwQixDQUFDLGNBQWMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUMxRixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL25vZWxpYXBhcmFkYWNhc3Ryby9pdHgtYmFja2VuZC10b29sL3Rlc3RzL2plc3QvQXBwbGljYXRpb24vU2VydmljZS9Qcm9kdWN0TGlzdFNlcnZpY2UudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTb3J0V2VpZ2h0UXVlcnkgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvSXR4L0FwcGxpY2F0aW9uL1F1ZXJ5L1NvcnRXZWlnaHRRdWVyeSdcbmltcG9ydCBQcm9kdWN0VmlldyBmcm9tICcuLi8uLi8uLi8uLi9zcmMvSXR4L0FwcGxpY2F0aW9uL1F1ZXJ5L1ZpZXcvUHJvZHVjdFZpZXcnXG5pbXBvcnQgU2l6ZVN0b2NrVmlldyBmcm9tICcuLi8uLi8uLi8uLi9zcmMvSXR4L0FwcGxpY2F0aW9uL1F1ZXJ5L1ZpZXcvU2l6ZVN0b2NrVmlldydcbmltcG9ydCBQcm9kdWN0TGlzdFNlcnZpY2UgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL0l0eC9BcHBsaWNhdGlvbi9TZXJ2aWNlL1Byb2R1Y3RMaXN0U2VydmljZSdcbmltcG9ydCBTYWxlc1Njb3JlU3RyYXRlZ3kgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL0l0eC9BcHBsaWNhdGlvbi9TZXJ2aWNlL1NhbGVzU2NvcmVTdHJhdGVneSdcbmltcG9ydCBTaXplU3RvY2tTY29yZVN0cmF0ZWd5IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9JdHgvQXBwbGljYXRpb24vU2VydmljZS9TaXplU3RvY2tTY29yZVN0cmF0ZWd5J1xuaW1wb3J0IHsgQU5ZX09USEVSX1BST0RVQ1RfSUQsIEFOWV9PVEhFUl9QUk9EVUNUX05BTUUsIEFOWV9PVEhFUl9QUk9EVUNUX1VOSVRfU0FMRVMsIFBST0RVQ1RfSUQsIFBST0RVQ1RfTkFNRSwgUFJPRFVDVF9VTklUX1NBTEVTLCBSQU5ET01fU0laRV9TVE9DSywgUkFORE9NX1NJWkVfU1RPQ0tfMiwgUkFORE9NX1NJWkVfU1RPQ0tfMywgUkFORE9NX1NJWkVfU1RPQ0tfNCwgU0laRV9MLCBTSVpFX00sIFNJWkVfUyB9IGZyb20gJy4uLy4uL0luZnJhc3RydWN0dXJlL01vY2tzL21vY2tzJ1xuXG5kZXNjcmliZSgnUHJvZHVjdExpc3RTZXJ2aWNlJywgKCkgPT4ge1xuXHRsZXQgc2VydmljZTogUHJvZHVjdExpc3RTZXJ2aWNlXG5cdGxldCBtb2NrU2FsZXNTY29yZVN0cmF0ZWd5OiBqZXN0Lk1vY2tlZDxTYWxlc1Njb3JlU3RyYXRlZ3k+XG5cdGxldCBtb2NrU2l6ZVN0b2NrU2NvcmVTdHJhdGVneTogamVzdC5Nb2NrZWQ8U2l6ZVN0b2NrU2NvcmVTdHJhdGVneT5cblx0bGV0IHByb2R1Y3RzOiBQcm9kdWN0Vmlld1tdXG4gIGxldCB3ZWlnaHRzOiBTb3J0V2VpZ2h0UXVlcnlcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrU2FsZXNTY29yZVN0cmF0ZWd5ID0ge1xuICAgICAgY2FsY3VsYXRlU2NvcmU6IGplc3QuZm4oKSxcbiAgICB9IGFzIGplc3QuTW9ja2VkPFNhbGVzU2NvcmVTdHJhdGVneT5cblxuICAgIG1vY2tTaXplU3RvY2tTY29yZVN0cmF0ZWd5ID0ge1xuICAgICAgY2FsY3VsYXRlU2NvcmU6IGplc3QuZm4oKSxcbiAgICB9IGFzIGplc3QuTW9ja2VkPFNpemVTdG9ja1Njb3JlU3RyYXRlZ3k+XG4gICAgc2VydmljZSA9IG5ldyBQcm9kdWN0TGlzdFNlcnZpY2UoW1xuICAgICAgbW9ja1NhbGVzU2NvcmVTdHJhdGVneSxcbiAgICAgIG1vY2tTaXplU3RvY2tTY29yZVN0cmF0ZWd5LFxuICAgIF0pXG5cdFx0d2VpZ2h0cyA9IHtcblx0XHRcdGlkOiAncmFtZG9tSWQnLFxuXHRcdFx0c2FsZXNVbml0OiAwLjcsXG5cdFx0XHRzdG9ja1JhdGlvOiAwLjNcblx0XHR9XG5cdFx0cHJvZHVjdHMgPSBbXG5cdFx0XHRuZXcgUHJvZHVjdFZpZXcoXG5cdFx0XHRcdFBST0RVQ1RfSUQsXG5cdFx0XHRcdFBST0RVQ1RfTkFNRSxcblx0XHRcdFx0UFJPRFVDVF9VTklUX1NBTEVTLFxuXHRcdFx0XHRbXG5cdFx0XHRcdFx0bmV3IFNpemVTdG9ja1ZpZXcoU0laRV9TLCBSQU5ET01fU0laRV9TVE9DSyksXG5cdFx0XHRcdFx0bmV3IFNpemVTdG9ja1ZpZXcoU0laRV9NLCBSQU5ET01fU0laRV9TVE9DS18yKSxcblx0XHRcdFx0XHRuZXcgU2l6ZVN0b2NrVmlldyhTSVpFX0wsIFJBTkRPTV9TSVpFX1NUT0NLXzMpXG5cdFx0XHRcdF1cblx0XHRcdCksXG5cdFx0XHRuZXcgUHJvZHVjdFZpZXcoXG5cdFx0XHRcdEFOWV9PVEhFUl9QUk9EVUNUX0lELFxuXHRcdFx0XHRBTllfT1RIRVJfUFJPRFVDVF9OQU1FLFxuXHRcdFx0XHRBTllfT1RIRVJfUFJPRFVDVF9VTklUX1NBTEVTLFxuXHRcdFx0XHRbXG5cdFx0XHRcdFx0bmV3IFNpemVTdG9ja1ZpZXcoU0laRV9TLCBSQU5ET01fU0laRV9TVE9DS180KSxcblx0XHRcdFx0XHRuZXcgU2l6ZVN0b2NrVmlldyhTSVpFX00sIFJBTkRPTV9TSVpFX1NUT0NLXzIpLFxuXHRcdFx0XHRcdG5ldyBTaXplU3RvY2tWaWV3KFNJWkVfTCwgUkFORE9NX1NJWkVfU1RPQ0tfNClcblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdF1cblx0fSlcblxuXHRpdCgnc2hvdWxkIGNhbGwgY2FsY3VsYXRlU2NvcmUgb24gZWFjaCBzY29yaW5nIHN0cmF0ZWd5IGZvciBlYWNoIHByb2R1Y3QnLCAoKSA9PiB7XG4gICAgc2VydmljZS5saXN0UHJvZHVjdHMocHJvZHVjdHMsIHdlaWdodHMpXG5cbiAgICBleHBlY3QobW9ja1NhbGVzU2NvcmVTdHJhdGVneS5jYWxjdWxhdGVTY29yZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKHByb2R1Y3RzLmxlbmd0aClcbiAgICBwcm9kdWN0cy5mb3JFYWNoKChwcm9kdWN0KSA9PiB7XG4gICAgICBleHBlY3QobW9ja1NhbGVzU2NvcmVTdHJhdGVneS5jYWxjdWxhdGVTY29yZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgocHJvZHVjdCwgd2VpZ2h0cylcbiAgICB9KVxuXG4gICAgZXhwZWN0KG1vY2tTaXplU3RvY2tTY29yZVN0cmF0ZWd5LmNhbGN1bGF0ZVNjb3JlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMocHJvZHVjdHMubGVuZ3RoKVxuICAgIHByb2R1Y3RzLmZvckVhY2goKHByb2R1Y3QpID0+IHtcbiAgICAgIGV4cGVjdChtb2NrU2l6ZVN0b2NrU2NvcmVTdHJhdGVneS5jYWxjdWxhdGVTY29yZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgocHJvZHVjdCwgd2VpZ2h0cylcbiAgICB9KVxuICB9KVxufSlcbiJdLCJ2ZXJzaW9uIjozfQ==