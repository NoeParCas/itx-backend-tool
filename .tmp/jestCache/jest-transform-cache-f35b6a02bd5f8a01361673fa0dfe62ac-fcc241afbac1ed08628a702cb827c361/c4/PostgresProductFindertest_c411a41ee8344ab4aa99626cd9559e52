c49e91aa85bd4be5c86a970263271142
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const QueryBuilderMock_1 = __importDefault(require("../Mocks/QueryBuilderMock"));
const PostgresProductFinder_1 = __importDefault(require("../../../../src/Itx/Infrastructure/Query/PostgresProductFinder"));
const ProductView_1 = __importDefault(require("../../../../src/Itx/Application/Query/View/ProductView"));
const SizeStockView_1 = __importDefault(require("../../../../src/Itx/Application/Query/View/SizeStockView"));
describe('PostgresProductFinder', () => {
    const queryBuilder = (0, QueryBuilderMock_1.default)();
    const QUERY_RESULT = [
        {
            id: 1,
            name: 'Product 1',
            latest_sales: 10,
            latest_stock: [
                { size: 'S', stock: 5 },
                { size: 'M', stock: 3 },
                { size: 'L', stock: 2 }
            ]
        },
        {
            id: 2,
            name: 'Product 2',
            latest_sales: 20,
            latest_stock: [
                { size: 'S', stock: 0 },
                { size: 'M', stock: 3 },
                { size: 'L', stock: 0 }
            ]
        }
    ];
    const EXPECTED_FINDER_RESULT = [
        new ProductView_1.default(1, 'Product 1', 10, [
            new SizeStockView_1.default('S', 5),
            new SizeStockView_1.default('M', 3),
            new SizeStockView_1.default('L', 2)
        ]),
        new ProductView_1.default(2, 'Product 2', 20, [
            new SizeStockView_1.default('S', 0),
            new SizeStockView_1.default('M', 3),
            new SizeStockView_1.default('L', 0)
        ])
    ];
    it('should return all updated product information', () => __awaiter(void 0, void 0, void 0, function* () {
        const knexMock = jest.fn().mockReturnValue(queryBuilder);
        const productFinder = new PostgresProductFinder_1.default(knexMock);
        jest.spyOn(productFinder, 'findAllQuery').mockResolvedValue(QUERY_RESULT);
        const result = yield productFinder.findAll();
        expect(result).toEqual(EXPECTED_FINDER_RESULT);
    }));
    it('should throw an error if no products are found', () => __awaiter(void 0, void 0, void 0, function* () {
        const knexMock = jest.fn().mockReturnValue(queryBuilder);
        const productFinder = new PostgresProductFinder_1.default(knexMock);
        jest.spyOn(productFinder, 'findAllQuery').mockResolvedValue([]);
        yield expect(productFinder.findAll()).rejects.toThrow('Products not found');
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL25vZWxpYXBhcmFkYWNhc3Ryby9pdHgtYmFja2VuZC10b29sL3Rlc3RzL2plc3QvSW5mcmFzdHJ1Y3R1cmUvUXVlcnkvUG9zdGdyZXNQcm9kdWN0RmluZGVyLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQSxpRkFBMkQ7QUFDM0QsMkhBQWtHO0FBQ2xHLHlHQUFnRjtBQUNoRiw2R0FBb0Y7QUFFcEYsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxNQUFNLFlBQVksR0FBRyxJQUFBLDBCQUFtQixHQUFFLENBQUE7SUFDMUMsTUFBTSxZQUFZLEdBQUc7UUFDcEI7WUFDQyxFQUFFLEVBQUUsQ0FBQztZQUNMLElBQUksRUFBRSxXQUFXO1lBQ2pCLFlBQVksRUFBRSxFQUFFO1lBQ2hCLFlBQVksRUFBRTtnQkFDYixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtnQkFDdkIsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7Z0JBQ3ZCLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO2FBQ3ZCO1NBQ0Q7UUFDRDtZQUNDLEVBQUUsRUFBRSxDQUFDO1lBQ0wsSUFBSSxFQUFFLFdBQVc7WUFDakIsWUFBWSxFQUFFLEVBQUU7WUFDaEIsWUFBWSxFQUFFO2dCQUNiLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO2dCQUN2QixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtnQkFDdkIsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7YUFDdkI7U0FDRDtLQUNELENBQUE7SUFDRCxNQUFNLHNCQUFzQixHQUFHO1FBQzlCLElBQUkscUJBQVcsQ0FDZCxDQUFDLEVBQ0QsV0FBVyxFQUNYLEVBQUUsRUFDRjtZQUNDLElBQUksdUJBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3pCLElBQUksdUJBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3pCLElBQUksdUJBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQ3pCLENBQ0Q7UUFDRCxJQUFJLHFCQUFXLENBQ2QsQ0FBQyxFQUNELFdBQVcsRUFDWCxFQUFFLEVBQ0Y7WUFDQyxJQUFJLHVCQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN6QixJQUFJLHVCQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN6QixJQUFJLHVCQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUN6QixDQUNEO0tBQ0QsQ0FBQTtJQUVELEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxHQUFTLEVBQUU7UUFDOUQsTUFBTSxRQUFRLEdBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQXFCLENBQUE7UUFDN0UsTUFBTSxhQUFhLEdBQUcsSUFBSSwrQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUV6RCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUV6RSxNQUFNLE1BQU0sR0FBRyxNQUFNLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUU1QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUE7SUFDL0MsQ0FBQyxDQUFBLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxHQUFTLEVBQUU7UUFDL0QsTUFBTSxRQUFRLEdBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQXFCLENBQUE7UUFDN0UsTUFBTSxhQUFhLEdBQUcsSUFBSSwrQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUV6RCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUUvRCxNQUFNLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUE7SUFDNUUsQ0FBQyxDQUFBLENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9ub2VsaWFwYXJhZGFjYXN0cm8vaXR4LWJhY2tlbmQtdG9vbC90ZXN0cy9qZXN0L0luZnJhc3RydWN0dXJlL1F1ZXJ5L1Bvc3RncmVzUHJvZHVjdEZpbmRlci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtuZXggfSBmcm9tICdrbmV4J1xuaW1wb3J0IGdldFF1ZXJ5QnVpbGRlck1vY2sgZnJvbSAnLi4vTW9ja3MvUXVlcnlCdWlsZGVyTW9jaydcbmltcG9ydCBQb3N0Z3Jlc1Byb2R1Y3RGaW5kZXIgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL0l0eC9JbmZyYXN0cnVjdHVyZS9RdWVyeS9Qb3N0Z3Jlc1Byb2R1Y3RGaW5kZXInXG5pbXBvcnQgUHJvZHVjdFZpZXcgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL0l0eC9BcHBsaWNhdGlvbi9RdWVyeS9WaWV3L1Byb2R1Y3RWaWV3J1xuaW1wb3J0IFNpemVTdG9ja1ZpZXcgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL0l0eC9BcHBsaWNhdGlvbi9RdWVyeS9WaWV3L1NpemVTdG9ja1ZpZXcnXG5cbmRlc2NyaWJlKCdQb3N0Z3Jlc1Byb2R1Y3RGaW5kZXInLCAoKSA9PiB7XG5cdGNvbnN0IHF1ZXJ5QnVpbGRlciA9IGdldFF1ZXJ5QnVpbGRlck1vY2soKVxuXHRjb25zdCBRVUVSWV9SRVNVTFQgPSBbXG5cdFx0e1xuXHRcdFx0aWQ6IDEsXG5cdFx0XHRuYW1lOiAnUHJvZHVjdCAxJyxcblx0XHRcdGxhdGVzdF9zYWxlczogMTAsXG5cdFx0XHRsYXRlc3Rfc3RvY2s6IFtcblx0XHRcdFx0eyBzaXplOiAnUycsIHN0b2NrOiA1IH0sXG5cdFx0XHRcdHsgc2l6ZTogJ00nLCBzdG9jazogMyB9LFxuXHRcdFx0XHR7IHNpemU6ICdMJywgc3RvY2s6IDIgfVxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0aWQ6IDIsXG5cdFx0XHRuYW1lOiAnUHJvZHVjdCAyJyxcblx0XHRcdGxhdGVzdF9zYWxlczogMjAsXG5cdFx0XHRsYXRlc3Rfc3RvY2s6IFtcblx0XHRcdFx0eyBzaXplOiAnUycsIHN0b2NrOiAwIH0sXG5cdFx0XHRcdHsgc2l6ZTogJ00nLCBzdG9jazogMyB9LFxuXHRcdFx0XHR7IHNpemU6ICdMJywgc3RvY2s6IDAgfVxuXHRcdFx0XVxuXHRcdH1cblx0XVxuXHRjb25zdCBFWFBFQ1RFRF9GSU5ERVJfUkVTVUxUID0gW1xuXHRcdG5ldyBQcm9kdWN0Vmlldyhcblx0XHRcdDEsXG5cdFx0XHQnUHJvZHVjdCAxJyxcblx0XHRcdDEwLFxuXHRcdFx0W1xuXHRcdFx0XHRuZXcgU2l6ZVN0b2NrVmlldygnUycsIDUpLFxuXHRcdFx0XHRuZXcgU2l6ZVN0b2NrVmlldygnTScsIDMpLFxuXHRcdFx0XHRuZXcgU2l6ZVN0b2NrVmlldygnTCcsIDIpXG5cdFx0XHRdXG5cdFx0KSxcblx0XHRuZXcgUHJvZHVjdFZpZXcoXG5cdFx0XHQyLFxuXHRcdFx0J1Byb2R1Y3QgMicsXG5cdFx0XHQyMCxcblx0XHRcdFtcblx0XHRcdFx0bmV3IFNpemVTdG9ja1ZpZXcoJ1MnLCAwKSxcblx0XHRcdFx0bmV3IFNpemVTdG9ja1ZpZXcoJ00nLCAzKSxcblx0XHRcdFx0bmV3IFNpemVTdG9ja1ZpZXcoJ0wnLCAwKVxuXHRcdFx0XVxuXHRcdClcblx0XVxuXG5cdGl0KCdzaG91bGQgcmV0dXJuIGFsbCB1cGRhdGVkIHByb2R1Y3QgaW5mb3JtYXRpb24nLCBhc3luYyAoKSA9PiB7XG5cdFx0Y29uc3Qga25leE1vY2sgPSAoamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShxdWVyeUJ1aWxkZXIpIGFzIHVua25vd24pIGFzIEtuZXhcblx0XHRjb25zdCBwcm9kdWN0RmluZGVyID0gbmV3IFBvc3RncmVzUHJvZHVjdEZpbmRlcihrbmV4TW9jaylcblxuXHRcdGplc3Quc3B5T24ocHJvZHVjdEZpbmRlciwgJ2ZpbmRBbGxRdWVyeScpLm1vY2tSZXNvbHZlZFZhbHVlKFFVRVJZX1JFU1VMVCkgXG5cdFx0XG5cdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvZHVjdEZpbmRlci5maW5kQWxsKClcblxuXHRcdGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoRVhQRUNURURfRklOREVSX1JFU1VMVClcblx0fSlcblxuXHRpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIG5vIHByb2R1Y3RzIGFyZSBmb3VuZCcsIGFzeW5jICgpID0+IHtcblx0XHRjb25zdCBrbmV4TW9jayA9IChqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHF1ZXJ5QnVpbGRlcikgYXMgdW5rbm93bikgYXMgS25leFxuXHRcdGNvbnN0IHByb2R1Y3RGaW5kZXIgPSBuZXcgUG9zdGdyZXNQcm9kdWN0RmluZGVyKGtuZXhNb2NrKVxuXG5cdFx0amVzdC5zcHlPbihwcm9kdWN0RmluZGVyLCAnZmluZEFsbFF1ZXJ5JykubW9ja1Jlc29sdmVkVmFsdWUoW10pIFxuXG5cdFx0YXdhaXQgZXhwZWN0KHByb2R1Y3RGaW5kZXIuZmluZEFsbCgpKS5yZWplY3RzLnRvVGhyb3coJ1Byb2R1Y3RzIG5vdCBmb3VuZCcpXG5cdH0pXG59KVxuIl0sInZlcnNpb24iOjN9