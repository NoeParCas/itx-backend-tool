{"file":"/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Infrastructure/Query/PostgresProductFinder.test.ts","mappings":";;;;;;;;;;;;;;AACA,iFAA2D;AAC3D,2HAAkG;AAClG,yGAAgF;AAChF,6GAAoF;AACpF,8HAAqG;AAErG,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACtC,MAAM,YAAY,GAAG,IAAA,0BAAmB,GAAE,CAAA;IAC1C,MAAM,YAAY,GAAG;QACpB;YACC,EAAE,EAAE,CAAC;YACL,IAAI,EAAE,WAAW;YACjB,YAAY,EAAE,EAAE;YAChB,YAAY,EAAE;gBACb,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;gBACvB,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;gBACvB,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;aACvB;SACD;QACD;YACC,EAAE,EAAE,CAAC;YACL,IAAI,EAAE,WAAW;YACjB,YAAY,EAAE,EAAE;YAChB,YAAY,EAAE;gBACb,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;gBACvB,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;gBACvB,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;aACvB;SACD;KACD,CAAA;IACD,MAAM,sBAAsB,GAAG;QAC9B,IAAI,qBAAW,CACd,CAAC,EACD,WAAW,EACX,EAAE,EACF;YACC,IAAI,uBAAa,CAAC,GAAG,EAAE,CAAC,CAAC;YACzB,IAAI,uBAAa,CAAC,GAAG,EAAE,CAAC,CAAC;YACzB,IAAI,uBAAa,CAAC,GAAG,EAAE,CAAC,CAAC;SACzB,CACD;QACD,IAAI,qBAAW,CACd,CAAC,EACD,WAAW,EACX,EAAE,EACF;YACC,IAAI,uBAAa,CAAC,GAAG,EAAE,CAAC,CAAC;YACzB,IAAI,uBAAa,CAAC,GAAG,EAAE,CAAC,CAAC;YACzB,IAAI,uBAAa,CAAC,GAAG,EAAE,CAAC,CAAC;SACzB,CACD;KACD,CAAA;IAED,EAAE,CAAC,+CAA+C,EAAE,GAAS,EAAE;QAC9D,MAAM,QAAQ,GAAI,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,YAAY,CAAqB,CAAA;QAC7E,MAAM,aAAa,GAAG,IAAI,+BAAqB,CAAC,QAAQ,CAAC,CAAA;QAEzD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAA;QAEzE,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,OAAO,EAAE,CAAA;QAE5C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAA;IAC/C,CAAC,CAAA,CAAC,CAAA;IAEF,EAAE,CAAC,gDAAgD,EAAE,GAAS,EAAE;QAC/D,MAAM,QAAQ,GAAI,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,YAAY,CAAqB,CAAA;QAC7E,MAAM,aAAa,GAAG,IAAI,+BAAqB,CAAC,QAAQ,CAAC,CAAA;QAEzD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;QAE/D,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,kCAAwB,CAAC,CAAA;IAChF,CAAC,CAAA,CAAC,CAAA;AACH,CAAC,CAAC,CAAA","names":[],"sources":["/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Infrastructure/Query/PostgresProductFinder.test.ts"],"sourcesContent":["import { Knex } from 'knex'\nimport getQueryBuilderMock from '../Mocks/QueryBuilderMock'\nimport PostgresProductFinder from '../../../../src/Itx/Infrastructure/Query/PostgresProductFinder'\nimport ProductView from '../../../../src/Itx/Application/Query/View/ProductView'\nimport SizeStockView from '../../../../src/Itx/Application/Query/View/SizeStockView'\nimport ProductNotFoundException from '../../../../src/Itx/Domain/Exceptions/ProductNotFoundException'\n\ndescribe('PostgresProductFinder', () => {\n\tconst queryBuilder = getQueryBuilderMock()\n\tconst QUERY_RESULT = [\n\t\t{\n\t\t\tid: 1,\n\t\t\tname: 'Product 1',\n\t\t\tlatest_sales: 10,\n\t\t\tlatest_stock: [\n\t\t\t\t{ size: 'S', stock: 5 },\n\t\t\t\t{ size: 'M', stock: 3 },\n\t\t\t\t{ size: 'L', stock: 2 }\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\tname: 'Product 2',\n\t\t\tlatest_sales: 20,\n\t\t\tlatest_stock: [\n\t\t\t\t{ size: 'S', stock: 0 },\n\t\t\t\t{ size: 'M', stock: 3 },\n\t\t\t\t{ size: 'L', stock: 0 }\n\t\t\t]\n\t\t}\n\t]\n\tconst EXPECTED_FINDER_RESULT = [\n\t\tnew ProductView(\n\t\t\t1,\n\t\t\t'Product 1',\n\t\t\t10,\n\t\t\t[\n\t\t\t\tnew SizeStockView('S', 5),\n\t\t\t\tnew SizeStockView('M', 3),\n\t\t\t\tnew SizeStockView('L', 2)\n\t\t\t]\n\t\t),\n\t\tnew ProductView(\n\t\t\t2,\n\t\t\t'Product 2',\n\t\t\t20,\n\t\t\t[\n\t\t\t\tnew SizeStockView('S', 0),\n\t\t\t\tnew SizeStockView('M', 3),\n\t\t\t\tnew SizeStockView('L', 0)\n\t\t\t]\n\t\t)\n\t]\n\n\tit('should return all updated product information', async () => {\n\t\tconst knexMock = (jest.fn().mockReturnValue(queryBuilder) as unknown) as Knex\n\t\tconst productFinder = new PostgresProductFinder(knexMock)\n\n\t\tjest.spyOn(productFinder, 'findAllQuery').mockResolvedValue(QUERY_RESULT) \n\t\t\n\t\tconst result = await productFinder.findAll()\n\n\t\texpect(result).toEqual(EXPECTED_FINDER_RESULT)\n\t})\n\n\tit('should throw an error if no products are found', async () => {\n\t\tconst knexMock = (jest.fn().mockReturnValue(queryBuilder) as unknown) as Knex\n\t\tconst productFinder = new PostgresProductFinder(knexMock)\n\n\t\tjest.spyOn(productFinder, 'findAllQuery').mockResolvedValue([]) \n\n\t\tawait expect(productFinder.findAll()).rejects.toThrow(ProductNotFoundException)\n\t})\n})\n"],"version":3}