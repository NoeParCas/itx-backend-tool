2466e856c42f0e51edeb311ad9138568
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const QueryBuilderMock_1 = __importDefault(require("../Mocks/QueryBuilderMock"));
const PostgresProductFinder_1 = __importDefault(require("../../../../src/Itx/Infrastructure/Query/PostgresProductFinder"));
const ProductView_1 = __importDefault(require("../../../../src/Itx/Application/Query/View/ProductView"));
const SizeStockView_1 = __importDefault(require("../../../../src/Itx/Application/Query/View/SizeStockView"));
const ProductNotFoundException_1 = __importDefault(require("../../../../src/Itx/Domain/Exceptions/ProductNotFoundException"));
describe('PostgresProductFinder', () => {
    const queryBuilder = (0, QueryBuilderMock_1.default)();
    const QUERY_RESULT = [
        {
            id: 1,
            name: 'Product 1',
            latest_sales: 10,
            latest_stock: [
                { size: 'S', stock: 5 },
                { size: 'M', stock: 3 },
                { size: 'L', stock: 2 }
            ]
        },
        {
            id: 2,
            name: 'Product 2',
            latest_sales: 20,
            latest_stock: [
                { size: 'S', stock: 0 },
                { size: 'M', stock: 3 },
                { size: 'L', stock: 0 }
            ]
        }
    ];
    const EXPECTED_FINDER_RESULT = [
        new ProductView_1.default(1, 'Product 1', 10, [
            new SizeStockView_1.default('S', 5),
            new SizeStockView_1.default('M', 3),
            new SizeStockView_1.default('L', 2)
        ]),
        new ProductView_1.default(2, 'Product 2', 20, [
            new SizeStockView_1.default('S', 0),
            new SizeStockView_1.default('M', 3),
            new SizeStockView_1.default('L', 0)
        ])
    ];
    it('should return all updated product information', () => __awaiter(void 0, void 0, void 0, function* () {
        const knexMock = jest.fn().mockReturnValue(queryBuilder);
        const productFinder = new PostgresProductFinder_1.default(knexMock);
        jest.spyOn(productFinder, 'findAllQuery').mockResolvedValue(QUERY_RESULT);
        const result = yield productFinder.findAll();
        expect(result).toEqual(EXPECTED_FINDER_RESULT);
    }));
    it('should throw an error if no products are found', () => __awaiter(void 0, void 0, void 0, function* () {
        const knexMock = jest.fn().mockReturnValue(queryBuilder);
        const productFinder = new PostgresProductFinder_1.default(knexMock);
        jest.spyOn(productFinder, 'findAllQuery').mockResolvedValue([]);
        yield expect(productFinder.findAll()).rejects.toThrow(ProductNotFoundException_1.default);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL25vZWxpYXBhcmFkYWNhc3Ryby9pdHgtYmFja2VuZC10b29sL3Rlc3RzL2plc3QvSW5mcmFzdHJ1Y3R1cmUvUXVlcnkvUG9zdGdyZXNQcm9kdWN0RmluZGVyLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQSxpRkFBMkQ7QUFDM0QsMkhBQWtHO0FBQ2xHLHlHQUFnRjtBQUNoRiw2R0FBb0Y7QUFDcEYsOEhBQXFHO0FBRXJHLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDdEMsTUFBTSxZQUFZLEdBQUcsSUFBQSwwQkFBbUIsR0FBRSxDQUFBO0lBQzFDLE1BQU0sWUFBWSxHQUFHO1FBQ3BCO1lBQ0MsRUFBRSxFQUFFLENBQUM7WUFDTCxJQUFJLEVBQUUsV0FBVztZQUNqQixZQUFZLEVBQUUsRUFBRTtZQUNoQixZQUFZLEVBQUU7Z0JBQ2IsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7Z0JBQ3ZCLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO2dCQUN2QixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTthQUN2QjtTQUNEO1FBQ0Q7WUFDQyxFQUFFLEVBQUUsQ0FBQztZQUNMLElBQUksRUFBRSxXQUFXO1lBQ2pCLFlBQVksRUFBRSxFQUFFO1lBQ2hCLFlBQVksRUFBRTtnQkFDYixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtnQkFDdkIsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7Z0JBQ3ZCLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO2FBQ3ZCO1NBQ0Q7S0FDRCxDQUFBO0lBQ0QsTUFBTSxzQkFBc0IsR0FBRztRQUM5QixJQUFJLHFCQUFXLENBQ2QsQ0FBQyxFQUNELFdBQVcsRUFDWCxFQUFFLEVBQ0Y7WUFDQyxJQUFJLHVCQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN6QixJQUFJLHVCQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN6QixJQUFJLHVCQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUN6QixDQUNEO1FBQ0QsSUFBSSxxQkFBVyxDQUNkLENBQUMsRUFDRCxXQUFXLEVBQ1gsRUFBRSxFQUNGO1lBQ0MsSUFBSSx1QkFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDekIsSUFBSSx1QkFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDekIsSUFBSSx1QkFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDekIsQ0FDRDtLQUNELENBQUE7SUFFRCxFQUFFLENBQUMsK0NBQStDLEVBQUUsR0FBUyxFQUFFO1FBQzlELE1BQU0sUUFBUSxHQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFxQixDQUFBO1FBQzdFLE1BQU0sYUFBYSxHQUFHLElBQUksK0JBQXFCLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFekQsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUE7UUFFekUsTUFBTSxNQUFNLEdBQUcsTUFBTSxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFNUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0lBQy9DLENBQUMsQ0FBQSxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsZ0RBQWdELEVBQUUsR0FBUyxFQUFFO1FBQy9ELE1BQU0sUUFBUSxHQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFxQixDQUFBO1FBQzdFLE1BQU0sYUFBYSxHQUFHLElBQUksK0JBQXFCLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFekQsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFL0QsTUFBTSxNQUFNLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxrQ0FBd0IsQ0FBQyxDQUFBO0lBQ2hGLENBQUMsQ0FBQSxDQUFDLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbm9lbGlhcGFyYWRhY2FzdHJvL2l0eC1iYWNrZW5kLXRvb2wvdGVzdHMvamVzdC9JbmZyYXN0cnVjdHVyZS9RdWVyeS9Qb3N0Z3Jlc1Byb2R1Y3RGaW5kZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLbmV4IH0gZnJvbSAna25leCdcbmltcG9ydCBnZXRRdWVyeUJ1aWxkZXJNb2NrIGZyb20gJy4uL01vY2tzL1F1ZXJ5QnVpbGRlck1vY2snXG5pbXBvcnQgUG9zdGdyZXNQcm9kdWN0RmluZGVyIGZyb20gJy4uLy4uLy4uLy4uL3NyYy9JdHgvSW5mcmFzdHJ1Y3R1cmUvUXVlcnkvUG9zdGdyZXNQcm9kdWN0RmluZGVyJ1xuaW1wb3J0IFByb2R1Y3RWaWV3IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9JdHgvQXBwbGljYXRpb24vUXVlcnkvVmlldy9Qcm9kdWN0VmlldydcbmltcG9ydCBTaXplU3RvY2tWaWV3IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9JdHgvQXBwbGljYXRpb24vUXVlcnkvVmlldy9TaXplU3RvY2tWaWV3J1xuaW1wb3J0IFByb2R1Y3ROb3RGb3VuZEV4Y2VwdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9zcmMvSXR4L0RvbWFpbi9FeGNlcHRpb25zL1Byb2R1Y3ROb3RGb3VuZEV4Y2VwdGlvbidcblxuZGVzY3JpYmUoJ1Bvc3RncmVzUHJvZHVjdEZpbmRlcicsICgpID0+IHtcblx0Y29uc3QgcXVlcnlCdWlsZGVyID0gZ2V0UXVlcnlCdWlsZGVyTW9jaygpXG5cdGNvbnN0IFFVRVJZX1JFU1VMVCA9IFtcblx0XHR7XG5cdFx0XHRpZDogMSxcblx0XHRcdG5hbWU6ICdQcm9kdWN0IDEnLFxuXHRcdFx0bGF0ZXN0X3NhbGVzOiAxMCxcblx0XHRcdGxhdGVzdF9zdG9jazogW1xuXHRcdFx0XHR7IHNpemU6ICdTJywgc3RvY2s6IDUgfSxcblx0XHRcdFx0eyBzaXplOiAnTScsIHN0b2NrOiAzIH0sXG5cdFx0XHRcdHsgc2l6ZTogJ0wnLCBzdG9jazogMiB9XG5cdFx0XHRdXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRpZDogMixcblx0XHRcdG5hbWU6ICdQcm9kdWN0IDInLFxuXHRcdFx0bGF0ZXN0X3NhbGVzOiAyMCxcblx0XHRcdGxhdGVzdF9zdG9jazogW1xuXHRcdFx0XHR7IHNpemU6ICdTJywgc3RvY2s6IDAgfSxcblx0XHRcdFx0eyBzaXplOiAnTScsIHN0b2NrOiAzIH0sXG5cdFx0XHRcdHsgc2l6ZTogJ0wnLCBzdG9jazogMCB9XG5cdFx0XHRdXG5cdFx0fVxuXHRdXG5cdGNvbnN0IEVYUEVDVEVEX0ZJTkRFUl9SRVNVTFQgPSBbXG5cdFx0bmV3IFByb2R1Y3RWaWV3KFxuXHRcdFx0MSxcblx0XHRcdCdQcm9kdWN0IDEnLFxuXHRcdFx0MTAsXG5cdFx0XHRbXG5cdFx0XHRcdG5ldyBTaXplU3RvY2tWaWV3KCdTJywgNSksXG5cdFx0XHRcdG5ldyBTaXplU3RvY2tWaWV3KCdNJywgMyksXG5cdFx0XHRcdG5ldyBTaXplU3RvY2tWaWV3KCdMJywgMilcblx0XHRcdF1cblx0XHQpLFxuXHRcdG5ldyBQcm9kdWN0Vmlldyhcblx0XHRcdDIsXG5cdFx0XHQnUHJvZHVjdCAyJyxcblx0XHRcdDIwLFxuXHRcdFx0W1xuXHRcdFx0XHRuZXcgU2l6ZVN0b2NrVmlldygnUycsIDApLFxuXHRcdFx0XHRuZXcgU2l6ZVN0b2NrVmlldygnTScsIDMpLFxuXHRcdFx0XHRuZXcgU2l6ZVN0b2NrVmlldygnTCcsIDApXG5cdFx0XHRdXG5cdFx0KVxuXHRdXG5cblx0aXQoJ3Nob3VsZCByZXR1cm4gYWxsIHVwZGF0ZWQgcHJvZHVjdCBpbmZvcm1hdGlvbicsIGFzeW5jICgpID0+IHtcblx0XHRjb25zdCBrbmV4TW9jayA9IChqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHF1ZXJ5QnVpbGRlcikgYXMgdW5rbm93bikgYXMgS25leFxuXHRcdGNvbnN0IHByb2R1Y3RGaW5kZXIgPSBuZXcgUG9zdGdyZXNQcm9kdWN0RmluZGVyKGtuZXhNb2NrKVxuXG5cdFx0amVzdC5zcHlPbihwcm9kdWN0RmluZGVyLCAnZmluZEFsbFF1ZXJ5JykubW9ja1Jlc29sdmVkVmFsdWUoUVVFUllfUkVTVUxUKSBcblx0XHRcblx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9kdWN0RmluZGVyLmZpbmRBbGwoKVxuXG5cdFx0ZXhwZWN0KHJlc3VsdCkudG9FcXVhbChFWFBFQ1RFRF9GSU5ERVJfUkVTVUxUKVxuXHR9KVxuXG5cdGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgbm8gcHJvZHVjdHMgYXJlIGZvdW5kJywgYXN5bmMgKCkgPT4ge1xuXHRcdGNvbnN0IGtuZXhNb2NrID0gKGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUocXVlcnlCdWlsZGVyKSBhcyB1bmtub3duKSBhcyBLbmV4XG5cdFx0Y29uc3QgcHJvZHVjdEZpbmRlciA9IG5ldyBQb3N0Z3Jlc1Byb2R1Y3RGaW5kZXIoa25leE1vY2spXG5cblx0XHRqZXN0LnNweU9uKHByb2R1Y3RGaW5kZXIsICdmaW5kQWxsUXVlcnknKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSkgXG5cblx0XHRhd2FpdCBleHBlY3QocHJvZHVjdEZpbmRlci5maW5kQWxsKCkpLnJlamVjdHMudG9UaHJvdyhQcm9kdWN0Tm90Rm91bmRFeGNlcHRpb24pXG5cdH0pXG59KVxuIl0sInZlcnNpb24iOjN9