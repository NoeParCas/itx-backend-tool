2c1c023fcf0a8bf2633d13c96c1f1609
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const QueryBuilderMock_1 = __importDefault(require("../Mocks/QueryBuilderMock"));
const PostgresProductFinder_1 = __importDefault(require("../../../../src/Itx/Infrastructure/Query/PostgresProductFinder"));
const ProductView_1 = __importDefault(require("../../../../src/Itx/Application/Query/View/ProductView"));
const SizeStockView_1 = __importDefault(require("../../../../src/Itx/Application/Query/View/SizeStockView"));
describe('PostgresProductFinder', () => {
    const queryBuilder = (0, QueryBuilderMock_1.default)();
    const QUERY_RESULT = [
        {
            id: 1,
            name: 'Product 1',
            latest_sales: 10,
            latest_stock: [
                { size: 'S', stock: 5 },
                { size: 'M', stock: 3 },
                { size: 'L', stock: 2 }
            ]
        },
        {
            id: 2,
            name: 'Product 2',
            latest_sales: 20,
            latest_stock: [
                { size: 'S', stock: 0 },
                { size: 'M', stock: 3 },
                { size: 'L', stock: 0 }
            ]
        }
    ];
    const EXPECTED_FINDER_RESULT = [
        new ProductView_1.default(1, 'Product 1', 10, [
            new SizeStockView_1.default('S', 5),
            new SizeStockView_1.default('M', 3),
            new SizeStockView_1.default('L', 2)
        ]),
        new ProductView_1.default(2, 'Product 2', 20, [
            new SizeStockView_1.default('S', 0),
            new SizeStockView_1.default('M', 3),
            new SizeStockView_1.default('L', 0)
        ])
    ];
    it('should return all updated product information', () => __awaiter(void 0, void 0, void 0, function* () {
        queryBuilder.groupBy = jest.fn().mockReturnValue(QUERY_RESULT);
        const knexMock = jest.fn().mockReturnValue(queryBuilder);
        const productFinder = new PostgresProductFinder_1.default(knexMock);
        const result = yield productFinder.findAll();
        expect(result).toEqual(EXPECTED_FINDER_RESULT);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL25vZWxpYXBhcmFkYWNhc3Ryby9pdHgtYmFja2VuZC10b29sL3Rlc3RzL2plc3QvSW5mcmFzdHJ1Y3R1cmUvUXVlcnkvUG9zdGdyZXNQcm9kdWN0RmluZGVyLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQSxpRkFBMkQ7QUFDM0QsMkhBQWtHO0FBQ2xHLHlHQUFnRjtBQUNoRiw2R0FBb0Y7QUFFcEYsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxNQUFNLFlBQVksR0FBRyxJQUFBLDBCQUFtQixHQUFFLENBQUE7SUFDMUMsTUFBTSxZQUFZLEdBQUc7UUFDcEI7WUFDQyxFQUFFLEVBQUUsQ0FBQztZQUNMLElBQUksRUFBRSxXQUFXO1lBQ2pCLFlBQVksRUFBRSxFQUFFO1lBQ2hCLFlBQVksRUFBRTtnQkFDYixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtnQkFDdkIsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7Z0JBQ3ZCLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO2FBQ3ZCO1NBQ0Q7UUFDRDtZQUNDLEVBQUUsRUFBRSxDQUFDO1lBQ0wsSUFBSSxFQUFFLFdBQVc7WUFDakIsWUFBWSxFQUFFLEVBQUU7WUFDaEIsWUFBWSxFQUFFO2dCQUNiLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO2dCQUN2QixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtnQkFDdkIsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7YUFDdkI7U0FDRDtLQUNELENBQUE7SUFDRCxNQUFNLHNCQUFzQixHQUFHO1FBQzlCLElBQUkscUJBQVcsQ0FDZCxDQUFDLEVBQ0QsV0FBVyxFQUNYLEVBQUUsRUFDRjtZQUNDLElBQUksdUJBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3pCLElBQUksdUJBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3pCLElBQUksdUJBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQ3pCLENBQ0Q7UUFDRCxJQUFJLHFCQUFXLENBQ2QsQ0FBQyxFQUNELFdBQVcsRUFDWCxFQUFFLEVBQ0Y7WUFDQyxJQUFJLHVCQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN6QixJQUFJLHVCQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN6QixJQUFJLHVCQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUN6QixDQUNEO0tBQ0QsQ0FBQTtJQUVELEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxHQUFTLEVBQUU7UUFDOUQsWUFBWSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBRTlELE1BQU0sUUFBUSxHQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFxQixDQUFBO1FBQzdFLE1BQU0sYUFBYSxHQUFHLElBQUksK0JBQXFCLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDekQsTUFBTSxNQUFNLEdBQUcsTUFBTSxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFNUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0lBQy9DLENBQUMsQ0FBQSxDQUFDLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbm9lbGlhcGFyYWRhY2FzdHJvL2l0eC1iYWNrZW5kLXRvb2wvdGVzdHMvamVzdC9JbmZyYXN0cnVjdHVyZS9RdWVyeS9Qb3N0Z3Jlc1Byb2R1Y3RGaW5kZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLbmV4IH0gZnJvbSAna25leCdcbmltcG9ydCBnZXRRdWVyeUJ1aWxkZXJNb2NrIGZyb20gJy4uL01vY2tzL1F1ZXJ5QnVpbGRlck1vY2snXG5pbXBvcnQgUG9zdGdyZXNQcm9kdWN0RmluZGVyIGZyb20gJy4uLy4uLy4uLy4uL3NyYy9JdHgvSW5mcmFzdHJ1Y3R1cmUvUXVlcnkvUG9zdGdyZXNQcm9kdWN0RmluZGVyJ1xuaW1wb3J0IFByb2R1Y3RWaWV3IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9JdHgvQXBwbGljYXRpb24vUXVlcnkvVmlldy9Qcm9kdWN0VmlldydcbmltcG9ydCBTaXplU3RvY2tWaWV3IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9JdHgvQXBwbGljYXRpb24vUXVlcnkvVmlldy9TaXplU3RvY2tWaWV3J1xuXG5kZXNjcmliZSgnUG9zdGdyZXNQcm9kdWN0RmluZGVyJywgKCkgPT4ge1xuXHRjb25zdCBxdWVyeUJ1aWxkZXIgPSBnZXRRdWVyeUJ1aWxkZXJNb2NrKClcblx0Y29uc3QgUVVFUllfUkVTVUxUID0gW1xuXHRcdHtcblx0XHRcdGlkOiAxLFxuXHRcdFx0bmFtZTogJ1Byb2R1Y3QgMScsXG5cdFx0XHRsYXRlc3Rfc2FsZXM6IDEwLFxuXHRcdFx0bGF0ZXN0X3N0b2NrOiBbXG5cdFx0XHRcdHsgc2l6ZTogJ1MnLCBzdG9jazogNSB9LFxuXHRcdFx0XHR7IHNpemU6ICdNJywgc3RvY2s6IDMgfSxcblx0XHRcdFx0eyBzaXplOiAnTCcsIHN0b2NrOiAyIH1cblx0XHRcdF1cblx0XHR9LFxuXHRcdHtcblx0XHRcdGlkOiAyLFxuXHRcdFx0bmFtZTogJ1Byb2R1Y3QgMicsXG5cdFx0XHRsYXRlc3Rfc2FsZXM6IDIwLFxuXHRcdFx0bGF0ZXN0X3N0b2NrOiBbXG5cdFx0XHRcdHsgc2l6ZTogJ1MnLCBzdG9jazogMCB9LFxuXHRcdFx0XHR7IHNpemU6ICdNJywgc3RvY2s6IDMgfSxcblx0XHRcdFx0eyBzaXplOiAnTCcsIHN0b2NrOiAwIH1cblx0XHRcdF1cblx0XHR9XG5cdF1cblx0Y29uc3QgRVhQRUNURURfRklOREVSX1JFU1VMVCA9IFtcblx0XHRuZXcgUHJvZHVjdFZpZXcoXG5cdFx0XHQxLFxuXHRcdFx0J1Byb2R1Y3QgMScsXG5cdFx0XHQxMCxcblx0XHRcdFtcblx0XHRcdFx0bmV3IFNpemVTdG9ja1ZpZXcoJ1MnLCA1KSxcblx0XHRcdFx0bmV3IFNpemVTdG9ja1ZpZXcoJ00nLCAzKSxcblx0XHRcdFx0bmV3IFNpemVTdG9ja1ZpZXcoJ0wnLCAyKVxuXHRcdFx0XVxuXHRcdCksXG5cdFx0bmV3IFByb2R1Y3RWaWV3KFxuXHRcdFx0Mixcblx0XHRcdCdQcm9kdWN0IDInLFxuXHRcdFx0MjAsXG5cdFx0XHRbXG5cdFx0XHRcdG5ldyBTaXplU3RvY2tWaWV3KCdTJywgMCksXG5cdFx0XHRcdG5ldyBTaXplU3RvY2tWaWV3KCdNJywgMyksXG5cdFx0XHRcdG5ldyBTaXplU3RvY2tWaWV3KCdMJywgMClcblx0XHRcdF1cblx0XHQpXG5cdF1cblxuXHRpdCgnc2hvdWxkIHJldHVybiBhbGwgdXBkYXRlZCBwcm9kdWN0IGluZm9ybWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuXHRcdHF1ZXJ5QnVpbGRlci5ncm91cEJ5ID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShRVUVSWV9SRVNVTFQpXG5cblx0XHRjb25zdCBrbmV4TW9jayA9IChqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHF1ZXJ5QnVpbGRlcikgYXMgdW5rbm93bikgYXMgS25leFxuXHRcdGNvbnN0IHByb2R1Y3RGaW5kZXIgPSBuZXcgUG9zdGdyZXNQcm9kdWN0RmluZGVyKGtuZXhNb2NrKVxuXHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb2R1Y3RGaW5kZXIuZmluZEFsbCgpXG5cblx0XHRleHBlY3QocmVzdWx0KS50b0VxdWFsKEVYUEVDVEVEX0ZJTkRFUl9SRVNVTFQpXG5cdH0pXG59KVxuIl0sInZlcnNpb24iOjN9