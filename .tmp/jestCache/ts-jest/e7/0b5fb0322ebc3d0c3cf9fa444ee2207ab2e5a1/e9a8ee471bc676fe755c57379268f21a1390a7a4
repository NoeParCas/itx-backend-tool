[["/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Infrastructure/Query/PostgresProductFinder.test.ts",{"fileContent":"import { Knex } from 'knex'\nimport getQueryBuilderMock from '../Mocks/QueryBuilderMock'\nimport PostgresProductFinder from '../../../../src/Itx/Infrastructure/Query/PostgresProductFinder'\nimport ProductView from '../../../../src/Itx/Application/Query/View/ProductView'\nimport SizeStockView from '../../../../src/Itx/Application/Query/View/SizeStockView'\nimport ProductNotFoundException from '../../../../src/Itx/Domain/Exceptions/ProductNotFoundException'\nimport { PRODUCT_ID, PRODUCT_NAME, PRODUCT_UNIT_SALES, RANDOM_SIZE_STOCK, SIZE_M, SIZE_S, \n\tRANDOM_SIZE_STOCK_2,\n\tSIZE_L,\n\tRANDOM_SIZE_STOCK_3,RANDOM_SIZE_STOCK_4,\n\tANY_OTHER_PRODUCT_ID, ANY_OTHER_PRODUCT_NAME, ANY_OTHER_PRODUCT_UNIT_SALES\n} from '../Mocks/mocks'\n\ndescribe('PostgresProductFinder', () => {\n\tconst queryBuilder = getQueryBuilderMock() \n\tconst QUERY_RESULT = [\n\t\t{\n\t\t\tid: PRODUCT_ID,\n\t\t\tname: PRODUCT_NAME,\n\t\t\tlatest_sales: PRODUCT_UNIT_SALES,\n\t\t\tlatest_stock: [\n\t\t\t\t{ size: SIZE_S, stock: RANDOM_SIZE_STOCK },\n\t\t\t\t{ size: SIZE_M, stock: RANDOM_SIZE_STOCK_2 },\n\t\t\t\t{ size: SIZE_L, stock: RANDOM_SIZE_STOCK_3 }\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: ANY_OTHER_PRODUCT_ID,\n\t\t\tname: ANY_OTHER_PRODUCT_NAME,\n\t\t\tlatest_sales: ANY_OTHER_PRODUCT_UNIT_SALES,\n\t\t\tlatest_stock: [\n\t\t\t\t{ size: SIZE_S, stock: RANDOM_SIZE_STOCK_4 },\n\t\t\t\t{ size: SIZE_M, stock: RANDOM_SIZE_STOCK_2 },\n\t\t\t\t{ size: SIZE_L, stock: RANDOM_SIZE_STOCK_4 }\n\t\t\t]\n\t\t}\n\t]\n\tconst EXPECTED_FINDER_RESULT = [\n\t\tnew ProductView(\n\t\t\tPRODUCT_ID,\n\t\t\tPRODUCT_NAME,\n\t\t\tPRODUCT_UNIT_SALES,\n\t\t\t[\n\t\t\t\tnew SizeStockView(SIZE_S, RANDOM_SIZE_STOCK),\n\t\t\t\tnew SizeStockView(SIZE_M, RANDOM_SIZE_STOCK_2),\n\t\t\t\tnew SizeStockView(SIZE_L, RANDOM_SIZE_STOCK_3)\n\t\t\t]\n\t\t),\n\t\tnew ProductView(\n\t\t\tANY_OTHER_PRODUCT_ID,\n\t\t\tANY_OTHER_PRODUCT_NAME,\n\t\t\tANY_OTHER_PRODUCT_UNIT_SALES,\n\t\t\t[\n\t\t\t\tnew SizeStockView(SIZE_S, RANDOM_SIZE_STOCK_4),\n\t\t\t\tnew SizeStockView(SIZE_M, RANDOM_SIZE_STOCK_2),\n\t\t\t\tnew SizeStockView(SIZE_L, RANDOM_SIZE_STOCK_4)\n\t\t\t]\n\t\t)\n\t]\n\n\tit('should return all updated product information', async () => {\n\t\tconst knexMock = (jest.fn().mockReturnValue(queryBuilder) as unknown) as Knex\n\t\tconst productFinder = new PostgresProductFinder(knexMock)\n\n\t\tjest.spyOn(productFinder, 'findAllQuery').mockResolvedValue(QUERY_RESULT) \n\t\t\n\t\tconst result = await productFinder.findAll()\n\n\t\texpect(result).toEqual(EXPECTED_FINDER_RESULT)\n\t})\n\n\tit('should throw an error if no products are found', async () => {\n\t\tconst knexMock = jest.fn().mockReturnValue(queryBuilder) as unknown as Knex\n\t\tconst productFinder = new PostgresProductFinder(knexMock)\n\n\t\tjest.spyOn(productFinder, 'findAllQuery').mockResolvedValue([]) \n\n\t\tawait expect(productFinder.findAll()).rejects.toThrow(ProductNotFoundException)\n\t})\n})\n","resolvedModuleNames":["/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Infrastructure/Mocks/QueryBuilderMock.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Infrastructure/Query/PostgresProductFinder.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/ProductView.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/SizeStockView.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Domain/Exceptions/ProductNotFoundException.ts","/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Infrastructure/Mocks/mocks.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/Finder/ProductFinder.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Domain/Exceptions/NotFoundError.ts"]}],["/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Infrastructure/Mocks/QueryBuilderMock.ts",{"fileContent":"export default function getQueryBuilderMock() {\n\treturn {\n\t\tselect: jest.fn().mockReturnThis(),\n\t\tfrom: jest.fn().mockReturnThis(),\n\t\twhere: jest.fn().mockReturnThis(),\n\t\tandWhere: jest.fn().mockReturnThis(),\n\t\torWhere: jest.fn().mockReturnThis(),\n\t\torderBy: jest.fn().mockReturnThis(),\n\t\tlimit: jest.fn().mockReturnThis(),\n\t\toffset: jest.fn().mockReturnThis(),\n\t\tinnerJoin: jest.fn().mockReturnThis(),\n\t\tleftJoin: jest.fn().mockReturnThis(),\n\t\trightJoin: jest.fn().mockReturnThis(),\n\t\tgroupBy: jest.fn().mockReturnThis(),\n\t\thaving: jest.fn().mockReturnThis(),\n\t\tinsert: jest.fn().mockReturnThis(),\n\t\tupdate: jest.fn().mockReturnThis(),\n\t\tdelete: jest.fn().mockReturnThis(),\n\t\traw: jest.fn()\n\t}\n}\n","resolvedModuleNames":[]}],["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Infrastructure/Query/PostgresProductFinder.ts",{"fileContent":"import { Knex } from 'knex'\nimport { ProductFinder } from '../../Application/Query/Finder/ProductFinder'\nimport SizeStockView from '../../Application/Query/View/SizeStockView'\nimport ProductView from '../../Application/Query/View/ProductView'\nimport ProductNotFoundException from '../../Domain/Exceptions/ProductNotFoundException'\n\nconst SCHEMA = 'itx'\nconst PRODUCT_TABLE = 'product'\nconst SIZE_STOCK_TABLE = 'stock'\nconst SALES_UNITS_TABLE = 'sales_units'\n\ntype LatestStockType = {\n\t\tsize: string\n\t\tstock: number\n\t}\nexport type ProductQueryType = {\n\tid: number\n\tname: string\n\tlatest_sales: number\n\tlatest_stock: LatestStockType[]\n}\nexport default class PostgresProductFinder implements ProductFinder {\n\tconstructor(\n\t\tprivate readonly postgresClient: Knex\n\t) {}\n\n\tasync findAll(): Promise<ProductView[]> {\n\t\tconst query = await this.findAllQuery()\n\n\t\tif (query.length === 0) {\n\t\t\tthrow new ProductNotFoundException()\n\t\t}\n\n\t\tconst products = query.map((product:ProductQueryType ) => {\n\t\t\tconst sizeStock = product.latest_stock.map((stock: LatestStockType) => {\n\t\t\t\treturn new SizeStockView(stock.size, stock.stock)\n\t\t\t})\n\n\t\t\treturn new ProductView(\n\t\t\t\tproduct.id,\n\t\t\t\tproduct.name,\n\t\t\t\tproduct.latest_sales,\n\t\t\t\tsizeStock\n\t\t\t)\n\t\t})\n\n\t\treturn products\n\t}\n\nasync findAllQuery(): Promise<ProductQueryType[]> {\n\treturn this.postgresClient(PRODUCT_TABLE)\n\t\t.select(\n\t\t\t`${PRODUCT_TABLE}.id`, \n\t\t\t`${PRODUCT_TABLE}.name`,\n\t\t\t'latest_sales.units as latest_sales',\n\t\t\tthis.postgresClient.raw(`jsonb_agg(\n\t\t\t\tjsonb_build_object(\n\t\t\t\t\t'size', latest_stock.size,\n\t\t\t\t\t'stock', latest_stock.stock\n\t\t\t\t)\n\t\t\t) as latest_stock`),\n\t\t)\n\t\t.withSchema(SCHEMA)\n\t\t.leftJoin(\n\t\t\tthis.postgresClient.raw(`(\n\t\t\t\tSELECT product_id, units\n\t\t\t\tFROM ${SCHEMA}.${SALES_UNITS_TABLE}\n\t\t\t\tWHERE (product_id, updated_at) IN (\n\t\t\t\t\tSELECT product_id, MAX(updated_at)\n\t\t\t\t\tFROM ${SCHEMA}.${SALES_UNITS_TABLE}\n\t\t\t\t\tGROUP BY product_id\n\t\t\t\t)\n\t\t\t) as latest_sales`),\n\t\t\t`${PRODUCT_TABLE}.id`,\n\t\t\t'latest_sales.product_id'\n\t\t)\n\t\t.leftJoin(\n\t\t\tthis.postgresClient.raw(`(\n\t\t\t\tSELECT product_id, size, stock\n\t\t\t\tFROM ${SCHEMA}.${SIZE_STOCK_TABLE}\n\t\t\t\tWHERE (product_id, size, updated_at) IN (\n\t\t\t\t\tSELECT product_id, size, MAX(updated_at)\n\t\t\t\t\tFROM ${SCHEMA}.${SIZE_STOCK_TABLE}\n\t\t\t\t\tGROUP BY product_id, size\n\t\t\t\t)\n\t\t\t) as latest_stock`),\n\t\t\t`${PRODUCT_TABLE}.id`,\n\t\t\t'latest_stock.product_id'\n\t\t)\n\t\t.groupBy(`${PRODUCT_TABLE}.id`, 'latest_sales.units')\n\t}\n}\n","resolvedModuleNames":["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/Finder/ProductFinder.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/SizeStockView.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/ProductView.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Domain/Exceptions/ProductNotFoundException.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Domain/Exceptions/NotFoundError.ts"]}],["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/SizeStockView.ts",{"fileContent":"export default class SizeStockView {\n\tconstructor(\n\t\treadonly size: string,\n\t\treadonly stock: number\n\t) {}\n}\n","resolvedModuleNames":[]}],["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/ProductView.ts",{"fileContent":"import SizeStockView from './SizeStockView'\n\nexport default class ProductView {\n\tconstructor(\n\t\treadonly id: number, \n\t\treadonly name: string, \n\t\treadonly sales: number,\n\t\treadonly sizeStock: SizeStockView[]\n\t) {}\n}\n","resolvedModuleNames":["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/SizeStockView.ts"]}],["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Domain/Exceptions/ProductNotFoundException.ts",{"fileContent":"import NotFoundError from './NotFoundError'\n\nexport default class ProductNotFoundException extends NotFoundError {\n\tpublic constructor() {\n\t\tsuper('No products found. Please check the database connection, if migrations were executed or the query.')\n\t}\n}\n","resolvedModuleNames":["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Domain/Exceptions/NotFoundError.ts"]}],["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Domain/Exceptions/NotFoundError.ts",{"fileContent":"export default class NotFoundError extends Error {}\n","resolvedModuleNames":[]}],["/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Infrastructure/Mocks/mocks.ts",{"fileContent":"export const PRODUCT_ID = 1\nexport const PRODUCT_NAME = 'Product 1'\nexport const PRODUCT_UNIT_SALES = 10\nexport const SIZE_S = 'S'\nexport const SIZE_M = 'M'\nexport const SIZE_L = 'L'\nexport const RANDOM_SIZE_STOCK = 5\nexport const RANDOM_SIZE_STOCK_2 = 3\nexport const RANDOM_SIZE_STOCK_3 = 2\nexport const RANDOM_SIZE_STOCK_4 = 0\nexport const ANY_OTHER_PRODUCT_ID = 2\nexport const ANY_OTHER_PRODUCT_NAME = 'Product 2'\nexport const ANY_OTHER_PRODUCT_UNIT_SALES = 20\n","resolvedModuleNames":[]}],["/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Application/Service/ProductListService.test.ts",{"fileContent":"import { SortWeightQuery } from '../../../../src/Itx/Application/Query/SortWeightQuery'\nimport ProductView from '../../../../src/Itx/Application/Query/View/ProductView'\nimport SizeStockView from '../../../../src/Itx/Application/Query/View/SizeStockView'\nimport ProductListService from '../../../../src/Itx/Application/Service/ProductListService'\nimport SalesScoreStrategy from '../../../../src/Itx/Application/Service/SalesScoreStrategy'\nimport SizeStockScoreStrategy from '../../../../src/Itx/Application/Service/SizeStockScoreStrategy'\nimport { ANY_OTHER_PRODUCT_ID, ANY_OTHER_PRODUCT_NAME, ANY_OTHER_PRODUCT_UNIT_SALES, PRODUCT_ID, PRODUCT_NAME, PRODUCT_UNIT_SALES, RANDOM_SIZE_STOCK, RANDOM_SIZE_STOCK_2, RANDOM_SIZE_STOCK_3, RANDOM_SIZE_STOCK_4, SIZE_L, SIZE_M, SIZE_S } from '../../Infrastructure/Mocks/mocks'\n\ndescribe('ProductListService', () => {\n\tlet service: ProductListService\n\tlet mockSalesScoreStrategy: jest.Mocked<SalesScoreStrategy>\n\tlet mockSizeStockScoreStrategy: jest.Mocked<SizeStockScoreStrategy>\n\tlet products: ProductView[]\n  let weights: SortWeightQuery\n\n  beforeEach(() => {\n    mockSalesScoreStrategy = {\n      calculateScore: jest.fn(),\n    } as jest.Mocked<SalesScoreStrategy>\n\n    mockSizeStockScoreStrategy = {\n      calculateScore: jest.fn(),\n    } as jest.Mocked<SizeStockScoreStrategy>\n    service = new ProductListService([\n      mockSalesScoreStrategy,\n      mockSizeStockScoreStrategy,\n    ])\n\t\tweights = {\n\t\t\tid: 'ramdomId',\n\t\t\tsalesUnit: 0.7,\n\t\t\tstockRatio: 0.3\n\t\t}\n\t\tproducts = [\n\t\t\tnew ProductView(\n\t\t\t\tPRODUCT_ID,\n\t\t\t\tPRODUCT_NAME,\n\t\t\t\tPRODUCT_UNIT_SALES,\n\t\t\t\t[\n\t\t\t\t\tnew SizeStockView(SIZE_S, RANDOM_SIZE_STOCK),\n\t\t\t\t\tnew SizeStockView(SIZE_M, RANDOM_SIZE_STOCK_2),\n\t\t\t\t\tnew SizeStockView(SIZE_L, RANDOM_SIZE_STOCK_3)\n\t\t\t\t]\n\t\t\t),\n\t\t\tnew ProductView(\n\t\t\t\tANY_OTHER_PRODUCT_ID,\n\t\t\t\tANY_OTHER_PRODUCT_NAME,\n\t\t\t\tANY_OTHER_PRODUCT_UNIT_SALES,\n\t\t\t\t[\n\t\t\t\t\tnew SizeStockView(SIZE_S, RANDOM_SIZE_STOCK_4),\n\t\t\t\t\tnew SizeStockView(SIZE_M, RANDOM_SIZE_STOCK_2),\n\t\t\t\t\tnew SizeStockView(SIZE_L, RANDOM_SIZE_STOCK_4)\n\t\t\t\t]\n\t\t\t)\n\t\t]\n\t})\n\n\tit('should call calculateScore on each scoring strategy for each product', () => {\n    service.listProducts(products, weights)\n\n    expect(mockSalesScoreStrategy.calculateScore).toHaveBeenCalledTimes(products.length)\n    products.forEach((product) => {\n      expect(mockSalesScoreStrategy.calculateScore).toHaveBeenCalledWith(product, weights)\n    })\n\n    expect(mockSizeStockScoreStrategy.calculateScore).toHaveBeenCalledTimes(products.length)\n    products.forEach((product) => {\n      expect(mockSizeStockScoreStrategy.calculateScore).toHaveBeenCalledWith(product, weights)\n    })\n  })\n\n\tit('should sort the products by their total score in descending order', () => {\n\t\tmockSalesScoreStrategy.calculateScore\n\t\t.mockReturnValueOnce(7) \n\t\t.mockReturnValueOnce(14) \n\t\tmockSizeStockScoreStrategy.calculateScore\n\t\t.mockReturnValueOnce(0.9)\n\t\t.mockReturnValueOnce(0.3)\n\n    const sortedProducts = service.listProducts(products, weights)\n\n    expect(sortedProducts[0].id).toBe(2)\n\t\texpect(sortedProducts[1].id).toBe(1)\n  })\n})\n","resolvedModuleNames":["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/SortWeightQuery.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/ProductView.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/SizeStockView.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Service/ProductListService.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Service/SalesScoreStrategy.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Service/SizeStockScoreStrategy.ts","/Users/noeliaparadacastro/itx-backend-tool/tests/jest/Infrastructure/Mocks/mocks.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Service/ScoreStrategy.ts"]}],["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Service/ProductListService.ts",{"fileContent":"import ProductView from '../Query/View/ProductView'\nimport { SortWeightQuery } from '../Query/SortWeightQuery'\nimport ScoreStrategy from './ScoreStrategy'\n\nexport default class ProductListService {\n\tconstructor(private readonly scoringStrategies: ScoreStrategy[]) {}\n\tlistProducts(products: ProductView[], weights: SortWeightQuery): ProductView[] {\n\t\tconst productScores = products.map((product) => {\n\t\t\tconst totalScore = this.calculateTotalScore(product, weights)\n\t\t\treturn {\n\t\t\t\tproduct,\n\t\t\t\tscore: totalScore\n\t\t\t}\n\t\t})\n\n\t\treturn productScores\n\t\t\t.sort((a, b) => b.score - a.score)\n\t\t\t.map((entry) => entry.product) \n\t}\n\n\tprivate calculateTotalScore(product: ProductView, weights: SortWeightQuery): number {\n\t\treturn this.scoringStrategies\n\t\t\t.map((strategy) => strategy.calculateScore(product, weights))\n\t\t\t.reduce((acc, score) => acc + score, 0)\n\t}\n}\n","resolvedModuleNames":["/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/ProductView.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/SortWeightQuery.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Service/ScoreStrategy.ts","/Users/noeliaparadacastro/itx-backend-tool/src/Itx/Application/Query/View/SizeStockView.ts"]}]]